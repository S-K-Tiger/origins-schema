{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "origins_item_condition",
	"description": "Item Condition Types operate on a combination of `World` and `ItemStack`, allowing to evaluate not only the stack of items, but also access the world for certain things, like accessing the recipe manager of the world.\nSee https://origins.readthedocs.io/en/latest/types/item_condition_types/",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"description": "ID and namespace of the item condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/item_condition_types/",
			"pattern": "^[a-z0-9\\-_\\.\\*]+:[a-z0-9\\-_\\./\\*]+$",
			"examples": [
				"origins:and", "origins:chance", "origins:constant", "origins:or",
				"origins:amount", "origins:armor_value", "origins:durability", "origins:empty", "origins:enchantable", "origins:enchantment",
				"origins:fireproof", "origins:food", "origins:fuel", "origins:harvest_level", "origins:has_power", "origins:ingredient",
				"origins:is_damageable", "origins:is_equippable", "origins:equippable", "origins:meat", "origins:nbt", "origins:power_count",
				"origins:relative_durability", "origins:smeltable"
			]
		},
		"inverted": {
			"type": "boolean",
			"description": "If true, the condition acts inverted.",
			"default": false
		}
	},
	"required": ["type"],
	"allOf": [
		{
			"$comment": "#region meta",
			"if": {
				"properties": { "type": {"const":"origins:and"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"conditions": {
						"type": "array",
						"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
						"items": {"$ref": "#"},
						"minItems": 2
					}
				},
				"required": ["conditions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:chance"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"chance": {
						"type": "number",
						"description": "The value to compare the randomly generated number to.",
						"exclusiveMinimum": 0, "exclusiveMaximum": 1
					}
				},
				"required": ["chance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:constant"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
					}
				},
				"required": ["value"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:or"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"conditions": {
						"type": "array",
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
						"items": {"$ref": "#"},
						"minItems": 2
					}
				},
				"required": ["conditions"]
			},
			"$comment": "#endregion meta"
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:amount"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/amount/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "Determines how to compare the number of items in this stack to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value to compare the item's count value to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:armor_value"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/armor_value/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How to compare the item's armor value to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value to compare the item's armor value to.\nNon-armor items are considered as having an armor value of 0.\nSee https://minecraft.wiki/w/Helmet#Defense_points, https://minecraft.wiki/w/Chestplate#Defense_points, https://minecraft.wiki/w/Leggings#Defense_points and https://minecraft.wiki/w/Boots#Defense_points"
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:durability"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/durability/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "Determines how the durability value of the item should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "The value which the durability value of the item should be compared to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:enchantment"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/enchantment/"
			},
			"then": {
				"properties": {
					"enchantment": {
						"type": "string",
						"description": "ID of the enchantment of interest.\nIf not set, amount of enchantments will be checked instead.",
						"pattern": "^[a-z0-9\\-_\\.\\*]+:[a-z0-9\\-_\\./\\*]+$",
						"examples": ["minecraft:aqua_affinity", "minecraft:bane_of_arthropods", "minecraft:blast_protection", "minecraft:channeling", "minecraft:protection", "minecraft:fortune"]
					},
					"use_modifications": {
						"type": "boolean",
						"description": "Determines whether to account for enchantments that were added/modified by unnatural means (e.g: via the Modify Enchantment Level Power.)",
						"default": true
					},
					"comparison": {
						"description": "How to compare the enchantment level, or the amount of enchantments, to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value to compare the enchantment level or amount against."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:fuel"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/fuel/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "Determines how the fuel time value (in ticks) of the item is compared to a specific value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="],
						"default": ">"
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value to compare the fuel time value (in ticks) of the item to.",
						"default": 0
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:harvest_level"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/harvest_level/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How to compare the item's harvest level to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value to compare the item's harvest level to.\nRefer to https://minecraft.wiki/w/Tiers for the harvest level of the materials (there it's called \"mining level\").\nItems without a material are considered to have a harvest level of 0."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:has_power"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/has_power/"
			},
			"then": {
				"properties": {
					"power": {
						"description": "The ID of the power to check for.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.\\*]+:[a-z0-9\\-_\\./\\*]+$"
					},
					"slot": {
						"description": "If specified, this will check if the power embedded to the item is assigned to this equipment slot.",
						"enum": ["head", "chest", "legs", "feet", "mainhand", "offhand"]
					}
				},
				"required": ["power"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:ingredient"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/ingredient/"
			},
			"then": {
				"properties": {
					"ingredient": {
						"$ref": "../data_types/ingredient.json",
						"description": "The ingredient this item must match to pass the check."
					}
				},
				"required": ["ingredient"]
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:is_equippable", "origins:equippable"] } },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/is_equippable/"
			},
			"then": {
				"properties": {
					"equipment_slot": {
						"enum": ["head", "chest", "legs", "feet", "offhand"],
						"description": "If specified, checks if the item is equippable in the specified equipment slot. Accepts \"head\", \"chest\", \"legs\", \"feet\", or \"offhand\"."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:nbt"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/nbt/"
			},
			"then": {
				"properties": {
					"nbt": {
						"type": "string",
						"description": "The NBT data to check for.",
						"pattern": "\\{.*\\:.*\\}",
						"examples": ["{exampleCustomTag: 1b}"]
					}
				},
				"required": ["nbt"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:power_count"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/power_count/"
			},
			"then": {
				"properties": {
					"slot": {
						"description": "If specified, this will check how many powers are assigned to this equipment slot.",
						"enum": ["head", "chest", "legs", "feet", "mainhand", "offhand"]
					},
					"comparison": {
						"description": "Determines how the amount of powers embedded in the item is compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"description": "The value to compare the amount of powers embedded in the item to.",
						"type": "integer"
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:relative_durability"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/item_condition_types/relative_durability/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "Determines how the relative durability value of the item should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
						
					},
					"compare_to": {
						"type": "integer",
						"description": "The value which the durability value of the item should be compared to.\nThe percentage of the durability value can be calculated with the currentDurability / maxDurability formula."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		}
	]
}