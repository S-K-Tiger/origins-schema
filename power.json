{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "Origins power JSON schema by S_K_Tiger",
	"description": "See https://origins.readthedocs.io/en/latest/json/power/ if you have any questions.\nFound any mistakes? Open a issue at https://github.com/S-K-Tiger/PackdevUtils/issues",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"description": "The namespace and ID of the desired Power Type.\nSee https://origins.readthedocs.io/en/latest/types/power_types/",
			"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
			"examples": [
				"origins:attribute_modify_transfer", "origins:attribute", "origins:burn", "origins:climbing", "origins:conditioned_attribute",
				"origins:conditioned_restrict_armor", "origins:cooldown", "origins:creative_flight", "origins:damage_over_time",
				"origins:disable_regen", "origins:effect_immunity", "origins:elytra_flight", "origins:entity_glow",
				"origins:entity_group", "origins:exhaust", "origins:fire_immunity", "origins:fire_projectile", "origins:freeze",
				"origins:ignore_water", "origins:inventory", "origins:invisibility", "origins:invulnerability", "origins:item_on_item",
				"origins:keep_inventory", "origins:launch", "origins:lava_vision", "origins:model_color", "origins:multiple",
				"origins:night_vision", "origins:overlay", "origins:particle", "origins:phasing", "origins:recipe",
				"origins:replace_loot_table", "origins:resource", "origins:restrict_armor", "origins:self_glow", "origins:shader",
				"origins:shaking", "origins:simple", "origins:stacking_status_effect", "origins:starting_equipment",
				"origins:status_bar_texture", "origins:swimming", "origins:toggle_night_vision", "origins:toggle", "origins:tooltip",
				"origins:walk_on_fluid",

				"origins:action_on_being_used", "origins:action_on_block_break", "origins:action_on_block_use", "origins:action_on_callback",
				"origins:action_on_entity_use", "origins:action_on_hit", "origins:action_on_item_use", "origins:action_on_land",
				"origins:action_on_wake_up", "origins:action_over_time", "origins:action_when_damage_taken", "origins:action_when_hit",
				"origins:active_self", "origins:attacker_action_when_hit", "origins:self_action_on_hit", "origins:self_action_on_kill",
				"origins:self_action_when_hit", "origins:target_action_on_hit",

				"origins:modify_air_speed", "origins:modify_attribute", "origins:modify_block_render", "origins:modify_break_speed",
				"origins:modify_camera_submersion", "origins:modify_crafting", "origins:modify_damage_dealt", "origins:modify_damage_taken",
				"origins:modify_exhaustion", "origins:modify_falling", "origins:modify_fluid_render", "origins:modify_food",
				"origins:modify_grindstone", "origins:modify_harvest", "origins:modify_healing", "origins:modify_insomnia_ticks",
				"origins:modify_jump", "origins:modify_lava_speed", "origins:modify_player_spawn", "origins:modify_projectile_damage",
				"origins:modify_slipperiness", "origins:modify_status_effect_amplifier", "origins:modify_status_effect_duration",
				"origins:modify_swim_speed", "origins:modify_velocity", "origins:modify_xp_gain",

				"origins:prevent_being_used", "origins:prevent_block_selection", "origins:prevent_block_use", "origins:prevent_death",
				"origins:prevent_elytra_flight", "origins:prevent_entity_collision", "origins:prevent_entity_render",
				"origins:prevent_entity_use", "origins:prevent_feature_render", "origins:prevent_game_event", "origins:prevent_item_use",
				"origins:prevent_sleep", "origins:prevent_sprinting"
			]
		},
		"name": {
			"type": "string",
			"description": "The display name of the power. Can be a literal string or a translation key."
		},
		"description": {
			"type": "string",
			"description": "The description of the power. Can be a literal string or a translation key."
		},
		"hidden": {
			"type": "boolean",
			"description": "If set to true, this power will not be displayed in the power list of the origin.",
			"default": false
		},
		"condition": {
			"$ref": "./conditions/entity.json",
			"description": "If set, this power will only be active when the player with this power fulfills the condition."
		},
		"loading_priority": {
			"type": "integer",
			"description": "Specifies when this power is loaded. Higher numbers mean it's loaded later, which means it will override those with lower loading priorities which share the same ID.",
			"default": 0
		},
		"badges": {
			"type": "array",
			"description": "If set, it will display icon(s) after the name of the power.\nSee https://origins.readthedocs.io/en/latest/types/data_types/badge/",
			"items": {
				"description": "An Object which displays an icon just after the name of a power in the power list from the Origins GUI.",
				"properties": {
					"type": {
						"enum": [
							"origins:crafting_recipe",
							"origins:keybind",
							"origins:sprite",
							"origins:tooltip"
						],
						"default": "origins:keybind",
						"description": "The namespace and ID of the desired badge type."
					},
					"sprite": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace, path and ID of the texture to use as the icon of the badge.\nSee https://origins.readthedocs.io/en/latest/misc/extras/sprites/ for a list of files included by default in the mod.",
						"examples": ["origins:textures/gui/badge/active.png", "origins:textures/gui/badge/arrow_up.png", "origins:textures/gui/badge/info.png", "origins:textures/gui/badge/star.png", "origins:textures/gui/badge/toggle.png"]
					}
				},
				"required": ["type", "sprite"],
				"examples": [
					{
						"type": "origins:tooltip",
						"sprite": "origins:textures/gui/badge/star.png",
						"text": "A gold star!"
					}
				],
				"allOf": [
					{
						"if": {
							"properties": { "type": {"const":"origins:crafting_recipe"} },
							"required": ["type"]
						},
						"then": {
							"properties": {
								"recipe": {
									"$ref": "./data_types/crafting_recipe.json",
									"description": "The recipe to display, including an id field which can be any arbitrary identifier."
								},
								"suffix": {
									"$ref": "./data_types/text_component.json",
									"description": "If specified, this text will be used as the suffix for the tooltip."
								},
								"prefix": {
									"$ref": "./data_types/text_component.json",
									"description": "If specified, this text will be used as the prefix for the tooltip."
								}
							},
							"required": ["recipe"]
						}
					}, {
						"if": {
							"properties": { "type": {"const":"origins:keybind"} },
							"required": ["type"]
						},
						"then": {
							"properties": {
								"text": {
									"type": "string",
									"description": "The string to use in the tooltip."
								}
							}
						}
					}, {
						"if": {
							"properties": { "type": {"const":"origins:tooltip"} },
							"required": ["type"]
						},
						"then": {
							"properties": {
								"text": {
									"$ref": "./data_types/text_component.json",
									"description": "The text to use in the tooltip."
								}
							}
						}
					}
				]
			}
		}
	},
	"required": ["type"],
	"allOf": [
		{
			"$comment": "#region Regular types",
			"if": {
				"properties": { "type": {"const":"origins:attribute_modify_transfer"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/attribute_modify_transfer/"
			},
			"then": {
				"properties": {
					"class": {
						"type": "string",
						"description": "The ID of the class to transfer the value of an attribute modifier to. See https://origins.readthedocs.io/en/latest/misc/extras/value_modifying_power_classes/ for possible values.",
						"pattern": "^[a-z0-9\\-_\\./]+$",
						"examples": [
							"modify_air_speed", "modify_break_speed", "modify_crafting", "modify_damage_dealt", "modify_damage_taken",
							"modify_exhaustion", "modify_xp_gain", "modify_jump", "modify_lava_speed", "modify_projectile_damage",
							"modify_slipperiness", "modify_status_effect_amplifier", "modify_status_effect_duration", "modify_swim_speed"
						]
					},
					"attribute": {
						"type": "string",
						"description": "The namespace and ID of the attribute to transfer the value from.\nRefer to the https://minecraft.fandom.com/wiki/Attribute page for a list of vanilla attributes that you can get the value from.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": [
							"minecraft:generic.max_health", "minecraft:generic.follow_range",
							"minecraft:generic.knockback_resistance", "minecraft:generic.movement_speed",
							"minecraft:generic.attack_damage", "minecraft:generic.armor",
							"minecraft:generic.armor_toughness", "minecraft:generic.attack_knockback",
							"minecraft:generic.attack_speed", "minecraft:generic.luck",
							"minecraft:horse.jump_strength",
							"minecraft:generic.flying_speed",
							"minecraft:zombie.spawn_reinforcements"
						]
					},
					"multiplier": {
						"type": "number",
						"description": "Determines the multiplier for the value.",
						"default": 1.0
					}
				},
				"required": ["class", "attribute"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:attribute"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/attribute/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "./data_types/attributed_modifier.json",
						"description": "If specified, this modifier will be applied to their corresponding attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to their corresponding attributes.",
						"items": {"$ref": "./data_types/attributed_modifier.json"}
					},
					"update_health": {
						"type": "boolean",
						"description": "When true, the player's health percentage will update to match their new maximum health.",
						"default": true
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:burn"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/burn/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Interval between being set on fire, in ticks.",
						"minimum": 0
					},
					"burn_duration": {
						"type": "integer",
						"description": "Determines how long the fire should last on the entity each time it is set, in seconds.",
						"minimum": 0
					}
				},
				"required": ["interval", "burn_duration"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:climbing"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"allow_holding": {
						"type": "boolean",
						"description": "If true, the entity that has the power is able to hold onto blocks.\nSee https://origins.readthedocs.io/en/latest/types/power_types/climbing/",
						"default": true
					},
					"hold_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified and `allow_holding` is true, the entity that has the power will be able to 'hold onto the block' (not affected by gravity) if the entity is sneaking and if this condition is fulfilled."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:conditioned_attribute"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "./data_types/attributed_modifier.json",
						"description": "If specified, this modifier will be applied to their corresponding attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to their corresponding attributes.",
						"items": {"$ref": "./data_types/attributed_modifier.json"}
					},
					"tick_rate": {
						"type": "integer",
						"description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.",
						"default": 20
					},
					"update_health": {
						"type": "boolean",
						"description": "Determines whether the health percentage will update to match the entity's new maximum health.",
						"default": true
					}
				},
				"oneOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:conditioned_restrict_armor"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/conditioned_restrict_armor/"
			},
			"then": {
				"properties": {
					"head": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the head equipment slot."
					},
					"chest": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the chest equipment slot."
					},
					"legs": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the legs equipment slot."
					},
					"feet": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the feet equipment slot."
					},
					"tick_rate": {
						"type": "integer",
						"description": "The frequency (in ticks) with which to check the condition. Lower values mean the condition changes are detected more quickly, but this comes at a potentially huge performance cost.",
						"default": 80
					}
				},
				"anyOf": [
					{"required": ["head"]},
					{"required": ["chest"]},
					{"required": ["legs"]},
					{"required": ["feet"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:cooldown"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/cooldown/"
			},
			"then": {
				"properties": {
					"cooldown": {
						"type": "integer",
						"description": "Cooldown duration in ticks.",
						"minimum": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD.",
						"default": {"should_render": false}}
				},
				"required": ["cooldown", "hud_render"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:damage_over_time"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/damage_over_time/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Duration of ticks to wait between the damage.",
						"minimum": 0,
						"default": 20
					},
					"onset_delay": {
						"type": "integer",
						"description": "How many ticks the power has to be active in order to apply the first damage.\nIf not set, this will be equal to `interval`.",
						"minimum": 0
					},
					"damage": {
						"type": "number",
						"description": "How much damage will be dealt each interval."
					},
					"damage_easy": {
						"type": "number",
						"description": "How much damage will be dealt each interval on Easy difficulty.\nIf not set, this will be equal to `damage`."
					},
					"damage_source": {
						"$ref": "./data_types/damage_source.json",
						"description": "If set, this is the damage source that will be used to deal the damage."
					},
					"protection_enchantment": {
						"type": "string",
						"description": "If set, the total amount of levels of this enchantment will be counted on the player's armor to increase the `onset_delay`.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"protection_effectiveness": {
						"type": "number",
						"description": "If `protection_enchantment` is set, this multiplier scales how effective it will be (1.0 = time the `onset_delay` is increased is the same as with Hydrophobia and Water Protection).",
						"default": 1.0
					}
				},
				"required": ["damage"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:effect_immunity"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/effect_immunity/"
			},
			"then": {
				"properties": {
					"effect": {
						"type": "string",
						"description": "If specified, the status effect with this namespace and ID can not be applied to the entity that has the power.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:weakness", "minecraft:strength"]
					},
					"effects": {
						"type": "array",
						"description": "If specified, the status effects with the specified namespace and IDs can not be applied to the entity that has the power.",
						"items": {
							"type": "string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": ["minecraft:weakness", "minecraft:strength"]
						}
					},
					"inverted": {
						"description": "Determines whether to make the entity immune to the status effect(s) that aren't specified.",
						"type":"boolean",
						"default":false
					}
				},
				"oneOf": [
					{"required": ["effect"]},
					{"required": ["effects"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:elytra_flight"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/elytra_flight/"
			},
			"then": {
				"properties": {
					"render_elytra": {
						"type": "boolean",
						"description": "Whether an Elytra should render on the player's back while this power is active."
					},
					"texture_location": {
						"type": "string",
						"description": "If specified, this will be the texture used by the Elytra granted by this power.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					}
				},
				"required": ["render_elytra"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:entity_glow"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/entity_glow/"
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, only entities which fulfill this condition will glow for the player that has the power."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the power will only be active if this condition is fulfilled by either or both the 'actor' (the player that has the power) and 'target' (the entity that would glow) entities."
					},
					"use_teams": {
						"type":"boolean",
						"description": "Determines whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the `red`, `green` and `blue` fields within this power type.",
						"default":true
					},
					"red": {
						"type":"number",
						"description": "Value by which the red component of the glow will be multiplied. Range: 0.0 - 1.0.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type":"number",
						"description": "Value by which the green component of the glow will be multiplied. Range: 0.0 - 1.0.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type":"number",
						"description": "Value by which the blue component of the glow will be multiplied. Range: 0.0 - 1.0.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:entity_group"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/entity_group/"
			},
			"then": {
				"properties": {
					"group": {
						"description": "The group to associate with the player. One of `default`, `undead`, `arthropod`, `illager`, or `aquatic`.\nSee https://minecraft.fandom.com/wiki/Mob#Classification for more information about the entity groups.",
						"enum": ["default", "undead", "arthropod", "illager", "aquatic"]
					}
				},
				"required": ["group"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:exhaust"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/exhaust/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Duration of ticks to wait between applying exhaustion.",
						"minimum": 1,
						"default": 20
					},
					"exhaustion": {
						"type": "number",
						"description": "How much exhaustion will be applied each interval."
					}
				},
				"required": ["exhaustion"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:fire_projectile"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/fire_projectile/"
			},
			"then": {
				"properties": {
					"entity_type": {
						"description": "The ID of the entity type that will be fired.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 1,
						"default": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"count": {
						"description": "The amount of projectiles to fire each use.",
						"type": "integer",
						"minimum": 1,
						"default": 1
					},
					"interval": {
						"type":"integer",
						"description": "Determines the interval for firing multiple projectiles consecutively (in ticks).\nIf set to 0, it will fire all the projectiles at the same tick.",
						"minimum": 0,
						"default":0
					},
					"start_delay": {
						"type":"integer",
						"description": "Determines how long the start of the firing process is delayed (in ticks).",
						"minimum": 0,
						"default":0
					},
					"speed": {
						"type":"number",
						"description": "The speed applied to the fired projectile.",
						"default": 1.5
					},
					"divergence": {
						"type":"number",
						"description": "How much each projectile fired is affected by random spread.",
						"default": 1.0
					},
					"sound": {
						"type":"string",
						"description": "If set, the sound with this ID will be played when the power is used.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"tag": {
						"type": "string",
						"description": "NBT data of the entity.",
						"pattern": "\\{.*\\:.*\\}"
					},
					"key": {
						"$ref": "./data_types/key.json",
						"description": "Which active key this power should respond to.\nIf none is specified, this power will use the primary active power key (by default G).\nThe default value is technically `{\"key\": \"none\"}` but Origins adds a power key mapping none to the primary key.",
						"default": {"key": "key.origins.primary_active"}
					}
				},
				"required": ["entity_type"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:inventory"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/inventory/"
			},
			"then": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The translation key or literal text to use as the display name for the inventory.",
						"pattern": "^[a-z0-9\\-_\\./]+$",
						"default": "container.inventory"
					},
					"container_type": {
						"description": "Determines what type of container the inventory will be similar to.",
						"enum": ["chest", "hopper", "dropper", "dispenser", "double_chest"],
						"default": "dropper"
					},
					"drop_on_death": {
						"description": "When this is set to true, the player will drop the items in the inventory on death (vanishing items will vanish!).",
						"type": "boolean",
						"default": false
					},
					"drop_on_death_filter": {
						"$ref": "./conditions/item.json",
						"description": "If this is set, only item stacks matching this condition will be dropped on death."
					},
					"recoverable": {
						"description": "Determines if the content of the inventory should be dropped upon losing the power.",
						"type":"boolean",
						"default":true
					},
					"key": {
						"$ref": "./data_types/key.json",
						"description": "Which active key this power should respond to.\nIf none is specified, this power will use the primary active power key (by default G).\nThe default value is technically `{\"key\": \"none\"}` but Origins adds a power key mapping none to the primary key.",
						"default": {"key": "key.origins.primary_active"}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:invisibility"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/invisibility/"
			},
			"then": {
				"properties": {
					"render_armor": {
						"type": "boolean",
						"description": "Whether or not the player's armor should be shown."
					}
				},
				"required": ["render_armor"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:invulnerability"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "Specifies which damage the player will be immune to.\nNOTE: This power type does not support the Amount (Damage Condition Type). See https://origins.readthedocs.io/en/latest/types/power_types/invulnerability/"
					}
				},
				"required": ["damage_condition"],
				"$comment": "Find a better way to implement \"not\":{\"damage_condition\":{\"type\":{\"const\":\"origins:amount\"}}}"
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:item_on_item"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/item_on_item/"
			},
			"then": {
				"properties": {
					"using_item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the specified actions will only execute if this condition is fulfilled by the item that is used to right-click an item."
					},
					"on_item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the specified actions will only execute if this condition is fulfilled by the item that has been right-clicked."
					},
					"result": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item will be given to the player."
					},
					"result_from_on_stack": {
						"type":"integer",
						"description": "Determines how many items based on the `on_item` stack will be given as a result for using an item on an item. Mostly to be used in conjunction with `result_item_action`.",
						"default":0
					},
					"using_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that is used to right-click an item."
					},
					"on_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that has been right-clicked."
					},
					"result_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that is given to the player."
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player after they used an item on an item."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:keep_inventory"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, only make the items that fulfill the specified item condition type persist in the entity's inventory."
					},
					"slots": {
						"type": "array",
						"description": "If specified, only make the items that are in the listed inventory slots persist in the entity's inventory.\nSee https://origins.readthedocs.io/en/latest/misc/positioned_item_stack_slots/ for possible values.",
						"items": {
							"$comment": "Because certian mods add inventory slots I've not specified a maximum",
							"type": "integer",
							"minimum": 0
						}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:launch"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/launch/"
			},
			"then": {
				"properties": {
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 1,
						"default": 1
					},
					"speed": {
						"type": "number",
						"description": "The speed applied to the player in the upwards direction."
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD."
					},
					"sound": {
						"description": "If specified, the sound event with this namespace and ID will be played when the power is triggered.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:entity.parrot.fly"]
					},
					"key": {
						"$ref": "./data_types/key.json",
						"description": "Which active key this power should respond to.",
						"default": {"key": "key.origins.primary_active"}
					}
				},
				"required": ["speed"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:lava_vision"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/lava_vision/"
			},
			"then": {
				"properties": {
					"s": {
						"type": "number",
						"description": "Near view. Vanilla default is 0.25, or 0.0 if you are under the effect of Fire Resistance."
					},
					"v": {
						"type": "number",
						"description": "Far view. Vanilla default is 1.0, or 3.0 if you are under the effect of Fire Resistance."
					}
				},
				"required": ["s", "v"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:model_color"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/model_color/"
			},
			"then": {
				"properties": {
					"red": {
						"type": "number",
						"description": "Value by which the red component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"alpha": {
						"type": "number",
						"description": "Value by which the alpha (= transparency) component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				},
				"anyOf": [
					{"required": ["red"]},
					{"required": ["green"]},
					{"required": ["blue"]},
					{"required": ["alpha"]}
				]
			}
		},
		{
			"if": {
				"properties":{"type":{"const":"origins:multiple"}},"required":["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/multiple/"
			},
			"then": {
				"$comment": "We check for vallid properties with `^[a-z0-9/._-]+$`.\nBecause we don't want to match properties already defined we add them to a negative lookahead `(?!)` directly after the start of the string.\nWe also put them in their own group so we can independantly check for the end of the string to allow things like 'conditional' to match while 'condition' won't. `(?!(?:)$)`\nThis will block meta properties. See https://github.com/apace100/apoli/issues/73",
				"patternProperties": {
					"^(?:type|name|description|hidden|condition|loading_priority|badges)$": true,
					"^(?!(?:type|name|description|hidden|condition|loading_priority|badges)$)[a-z0-9/._-]+$": {"$ref": "#"}
				},
				"additionalProperties": false
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:night_vision"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/night_vision/"
			},
			"then": {
				"properties": {
					"strength": {
						"type": "number",
						"description": "How strong the night vision effect is.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:overlay"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/overlay/"
			},
			"then": {
				"properties": {
					"texture": {
						"type": "string",
						"description": "The namespace and ID of the texture to use as an overlay.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"strength": {
						"type": "number",
						"description": "If the `\"texture\"` draw mode is used, it determines the alpha (transparency) value of the texture. If the `\"nausea\"` draw mode is used, it determines the value of how the texture is stretched (1.0 = screen size).",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"red": {
						"type": "number",
						"description": "Value by which the red component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the texture will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"draw_mode": {
						"enum": ["nausea", "texture"],
						"description": "Determines whether to treat black as transparent or draw the texture as is (`\"nausea\"` or `\"texture\"` respectively)."
					},
					"draw_phase": {
						"enum": ["below_hud", "above_hud"],
						"description": "Determines if the overlay should render below or above the HUD (\"below_hud\" or \"above_hud\" respectively)."
					},
					"hide_with_hud": {
						"type": "boolean",
						"default": true,
						"description": "Determines if the overlay should be hidden if the HUD elements are hidden (with F1)."
					},
					"visible_in_third_person": {
						"type": "boolean",
						"default": false,
						"description": "Determines if the overlay is visible in third person."
					}
				},
				"required": ["texture", "draw_mode", "draw_phase"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:particle"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/particle/"
			},
			"then": {
				"properties": {
					"particle": {
						"$ref": "./data_types/particle_effect.json",
						"description": "The particle type that will be spawned."
					},
					"frequency": {
						"type": "integer",
						"description": "Determines how often the particles should spawn (interval in ticks).",
						"minimum": 1
					},
					"visible_in_first_person": {
						"description": "Determines whether the particle should be visible in first person.",
						"type":"boolean",
						"default":false
					}
				},
				"required": ["particle", "frequency"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:phasing"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/phasing/"
			},
			"then": {
				"properties": {
					"blacklist": {
						"description": "If set to true, the `block_condition` will define which blocks the player can NOT move through.",
						"type": "boolean",
						"default": false
					},
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, the entity will only be able to move through these blocks (or not be able to move through these, depending on what `blacklist` is set to)."
					},
					"render_type": {
						"description": "Determines how the environment is rendered when \"phasing\" through (moving) blocks. Accepts `\"blindness\"`, `\"remove_blocks\"` or `\"none\"`.",
						"enum": ["remove_blocks", "blindness", "none"],
						"default": "blindness"
					},
					"view_distance": {
						"type": "number",
						"description": "Determines how far the player can look through walls when \"phasing\" (moving) through blocks when `render_type` is set to `\"blindness\"`.",
						"default": 10.0
					},
					"phase_down_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, the entity will only be able to \"phase\" (move) downwards if this condition is fulfilled."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:recipe"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/recipe/"
			},
			"then": {
				"properties": {
					"recipe": {
						"$ref": "./data_types/crafting_recipe.json",
						"description": "The recipe to craft, including an `id` field which can be any arbitrary (but unique) identifier."
					}
				},
				"required": ["recipe"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:replace_loot_table"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/replace_loot_table/"
			},
			"then": {
				"properties": {
					"replace": {
						"description": "An object with \"key\": \"value\" pairs that determine which loot table (\"key\") will be replaced with a new loot table (\"value\").\nSee https://origins.readthedocs.io/en/latest/types/power_types/replace_loot_table/",
						"type":"object"
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the loot tables will only be replaced if this condition is fulfilled by either or both 'actor' and 'target' entities."
					},
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, the loot tables will only be replaced if the block at the context of the loot tables fulfill this condition."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the loot tables will only be replaced if the item in the context of the loot tables fulfill this condition."
					},
					"priority": {
						"description": "Determines the application priority of the power.",
						"type":"integer",
						"default": 0
					}
				},
				"required": ["replace"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:resource"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/resource/"
			},
			"then": {
				"properties": {
					"min": {
						"type": "integer",
						"description": "The minimum value of the resource."
					},
					"max": {
						"type": "integer",
						"description": "The maximum value of the resource."
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the resource is visualized on the HUD."
					},
					"start_value": {
						"type": "integer",
						"description": "The value of the resource when the entity first receives the power. If not set, this will be set to the value of the `min` integer field."
					},
					"min_action": {
						"$ref": "./actions/entity.json",
						"description": "If set, this action will be executed on the player whenever the minimum value is reached."
					},
					"max_action": {
						"$ref": "./actions/entity.json",
						"description": "If set, this action will be executed on the player whenever the maximum value is reached."
					}
				},
				"required": ["min", "max"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:restrict_armor"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/restrict_armor/"
			},
			"then": {
				"properties": {
					"head": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the head equipment slot."
					},
					"chest": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the chest equipment slot."
					},
					"legs": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the legs equipment slot."
					},
					"feet": {
						"$ref": "./conditions/item.json",
						"description": "If specified, items which fulfills this condition cannot be equipped in the feet equipment slot."
					}
				},
				"anyOf": [
					{"required": ["head"]},
					{"required": ["chest"]},
					{"required": ["legs"]},
					{"required": ["feet"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:self_glow"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/self_glow/"
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If set, only entities which fulfill this condition will see the entity that has the power glow."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If set, only entities which fulfill this bi-entity condition in relation to the entity that has the power will see the entity that has the power glow."
					},
					"use_teams": {
						"type": "boolean",
						"default": true,
						"description": "Whether glowing entities should use their team's color with their glow. If set to false, the entity will instead use the `red`, `green` and `blue` fields within this power type."
					},
					"red": {
						"type": "number",
						"description": "Value by which the red component of the glow will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"green": {
						"type": "number",
						"description": "Value by which the green component of the glow will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"blue": {
						"type": "number",
						"description": "Value by which the blue component of the glow will be multiplied.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:shader"} },
				"required": ["type"]
			},
			"then": {
				"properties": {
					"shader": {
						"type": "string",
						"description": "Specifies the location of the shader resource file to use.\nFor more information about shaders, See https://minecraft.fandom.com/wiki/Shaders/Before_1.9",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:shaders/post/pencil.json"]
					},
					"toggleable": {
						"type":"boolean",
						"description": "Determines if the applied shader can be toggled.",
						"default":true
					}
				},
				"required": ["shader"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:stacking_status_effect"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/stacking_status_effect/"
			},
			"then": {
				"properties": {
					"min_stacks": {
						"type": "integer",
						"description": "The minimum number of stacks. Negative numbers are allowed."
					},
					"max_stacks": {
						"type": "integer",
						"description": "The maximum number of stacks."
					},
					"duration_per_stack": {
						"type": "integer",
						"description": "Determines the duration of the specified status effect(s) for each stack.\nThe actual duration of the specified status effect(s) is determined by the `stacks * duration_per_stack` formula."
					},
					"tick_rate": {
						"type":"integer",
						"description": "Determines how fast the power will gain/lose stacks in ticks.",
						"default":10
					},
					"effect": {
						"$ref": "./data_types/status_effect_instance.json",
						"description": "If specified, this status effect will be applied on the entity that has the power."
					},
					"effects": {
						"type": "array",
						"description": "If specified, these status effects will be applied on the entity that has the power.",
						"items": {"$ref": "./data_types/status_effect_instance.json"}
					}
				},
				"required": ["min_stacks", "max_stacks", "duration_per_stack"],
				"oneOf": [
					{"required": ["effect"]},
					{"required": ["effects"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:starting_equipment"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/starting_equipment/"
			},
			"then": {
				"properties": {
					"stack": {
						"$ref": "./data_types/positioned_item_stack.json",
						"description": "If specified, this item will be given to the player (can be specified in an inventory slot)."
					},
					"stacks": {
						"type": "array",
						"description": "If specified, these items will be given to the player (can be specified in an inventory slot).",
						"items": {"$ref": "./data_types/positioned_item_stack.json"}
					},
					"recurrent": {
						"description": "Determines whether the specified item(s) should be given after respawning.",
						"type":"boolean",
						"default": false
					}
				},
				"oneOf": [ {"required": ["stack"]}, {"required": ["stacks"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:status_bar_texture"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/status_bar_texture/"
			},
			"then": {
				"properties": {
					"texture": {
						"description": "The namespace and ID of the sprite sheet to replace the default one with.\nHere's what the vanilla sprite sheet looks like: https://raw.githubusercontent.com/misode/mcmeta/6d496b1a91476c4fdd45fdb093d0319141f9c109/assets/minecraft/textures/gui/icons.png",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					}
				},
				"required": ["texture"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:toggle_night_vision"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/toggle_night_vision/"
			},
			"then": {
				"properties": {
					"active_by_default": {
						"type": "boolean",
						"description": "Whether this power starts in the on or off state.",
						"default": true
					},
					"strength": {
						"type": "number",
						"description": "How strong the night vision effect is.",
						"minimum": 0.0, "maximum": 1.0,
						"default": 1.0
					},
					"key": {
						"$ref": "./data_types/key.json",
						"description": "Which active key this power should respond to.\nIf none is specified, this power will use the primary active power key (by default G).",
						"default": {"key": "key.origins.primary_active"}
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:toggle"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/toggle/"
			},
			"then": {
				"properties": {
					"active_by_default": {
						"description": "Determines whether the state of this power type should be ON by default.",
						"type":"boolean",
						"default":true
					},
					"key": {
						"$ref": "./data_types/key.json",
						"description": "Which active key this power should respond to.",
						"default": {"key": "key.origins.primary_active"}
					},
					"retain_state": {
						"description": "Determines whether the state of this power type should retain if the condition (if there is any) is no longer fulfilled.",
						"type":"boolean",
						"default":true
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:tooltip"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/tooltip/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref":"./conditions/item.json",
						"description": "If specified, the specified tooltip(s) will only apply to items that fulfills this condition."
					},
					"text": {
						"$ref": "./data_types/text_component.json",
						"description": "If specified, apply this string as a tooltip."
					},
					"texts": {
						"description": "If specified, apply these strings as a tooltip.",
						"type":"array",
						"items": {"$ref": "./data_types/text_component.json"}
					},
					"priority": {
						"description": "Determines the placement priority of the tooltip(s) of the power.",
						"type": "integer",
						"default": 0
					}
				},
				"oneOf": [ {"required": ["text"]}, {"required": ["texts"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:walk_on_fluid"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/walk_on_fluid/"
			},
			"then": {
				"properties": {
					"fluid": {
						"type": "string",
						"description": "The namespace and ID of the fluid tag on which the player should be able to walk onto.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:water", "minecraft:lava"]
					}
				},
				"required": ["fluid"]
			},
			"$comment": "#endregion Regular types"
		},
		{
			"$comment": "#region Action-related",
			"if": {
				"properties": { "type": { "enum": ["origins:action_on_entity_use", "origins:action_on_being_used"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_being_used/ https://origins.readthedocs.io/en/latest/types/power_types/action_on_entity_use/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "If specified, this action will be executed on either or both 'actor' (player) or 'target' (the entity that's been right-clicked) entity."
					},
					"held_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' entity in the specified hand(s) determined by the `hands` string array field."
					},
					"result_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (player) entity."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by either or both 'actor' (player) or 'target' (the entity that's been right-clicked) entity."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (player) entity's specified hand(s) determined by the `hands` string array field."
					},
					"hands": {
						"description": "Determines if the power should be activated if the player used the specified hand(s). Accepts `\"off_hand\"`, `\"main_hand\"` or both.",
						"type": "array",
						"items": {"enum": ["off_hand", "main_hand"]},
						"default": ["off_hand", "main_hand"],
						"uniqueItems": true
					},
					"result_stack": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item will be given to the 'actor' (player) entity."
					},
					"action_result": {
						"description": "Determines the result of the 'use' action.",
						"enum": ["consume_partial", "consume", "fail", "pass", "success"],
						"default": "success"
					},
					"priority": {
						"description": "Determines the execution priority of the power.",
						"type": "integer",
						"default": 0
					}
				},
				"dependencies": {"result_item_action": ["result_stack"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_block_break"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_block_break/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when a block is broken."
					},
					"block_action": {
						"$ref": "./actions/block.json",
						"description": "If specified, this action will be executed on the block that is broken."
					},
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If set, the specified actions will only trigger when this block condition is met by the broken block."
					},
					"only_when_harvested": {
						"description": "If this is true, the specified actions will only execute when the player succeeds in harvesting the block (e.g. they will not trigger when stone is broken by hand).",
						"type": "boolean",
						"default": true
					}
				},
				"anyOf": [ {"required": ["entity_action"]}, {"required": ["block_action"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_block_use"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_block_use/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this entity action type will be executed if all conditions are met."
					},
					"block_action": {
						"$ref": "./actions/block.json",
						"description": "If specified, the used block will run this action if all conditions are met."
					},
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the used block."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string field.",
						"default": true
					},
					"directions": {
						"description": "If specified, only execute the specified actions if you used the specified face of the block.",
						"type":"array",
						"items": {"enum": ["north", "east", "south", "west", "up", "down"]},
						"uniqueItems": true,
						"default": ["north", "east", "south", "west", "up", "down"]
					},
					"hands": {
						"description": "Determines if the power should be activated if the player used the specified hand(s). Accepts `\"off_hand\"`, `\"main_hand\"` or both.",
						"type": "array",
						"items": {"enum": ["off_hand", "main_hand"]},
						"default": ["off_hand", "main_hand"],
						"uniqueItems": true
					},
					"result_stack": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, gives the item to the 'actor' (the player that has the power) entity."
					},
					"held_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' entity in the specified hand(s) determined by the `hands` string field."
					},
					"result_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (the player that has the power) entity."
					},
					"action_result": {
						"enum": ["consume_partial", "consume", "fail", "pass", "success"],
						"default": "success",
						"description": "Determines the result of the 'use' action."
					}
				},
				"dependencies": {"result_item_action": ["result_stack"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_callback"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_callback/"
			},
			"then": {
				"properties": {
					"entity_action_chosen": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when the player chooses their origin on the last layer through the menu - by using the Orb of Origin or missing an origin or joining for the first time - if the power was gained from any of the layers."
					},
					"execute_chosen_when_orb": {
						"description": "When this is false, the `entity_action_chosen` will not be executed when the player changes their origin with an orb, but only when the player chooses an origin for the first time or their origin was reset to `origins:empty` via a command.",
						"type": "boolean",
						"default": true
					},
					"entity_action_gained": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when the power is gained."
					},
					"entity_action_lost": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when the power is lost."
					},
					"entity_action_added": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when the power is added.\nJoining a world adds each power back."
					},
					"entity_action_removed": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when the power is removed and right after the player respawns.\nLeaving a world removes each power."
					},
					"entity_action_respawned": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player right after the player respawns, after the `entity_action_removed`."
					}
				},
				"anyOf": [ {"required": ["entity_action_chosen"]}, {"required": ["entity_action_gained"]}, {"required": ["entity_action_lost"]}, {"required": ["entity_action_added"]}, {"required": ["entity_action_removed"]}, {"required": ["entity_action_respawned"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_hit"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_hit/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "The action to be executed on either or both 'actor' (the entity that has the power) and 'target' (the entity/entities that's been hit) entities."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the action will only execute when this condition is fulfilled by either or both 'actor' (the entity that has the power) and 'target' (the entity/entities that's been hit) entities."
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the action will only execute when this condition holds for the damage that was dealt by the 'actor' (the entity that has the power) entity."
					},
					"cooldown": {
						"type": "integer",
						"minimum": 0,
						"default": 1,
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again."
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD.",
						"default": {"should_render":false}
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_item_use"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_item_use/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player after they use an item."
					},
					"item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the remaining item."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the actions will only execute if this condition is fulfilled by the item before use."
					}
				},
				"anyOf": [ {"required": ["entity_action"]}, {"required": ["item_action"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_land"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_land/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the player."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_on_wake_up"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_on_wake_up/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player when they wake up."
					},
					"block_action": {
						"$ref": "./actions/block.json",
						"description": "If specified, this action will be executed on the bed block."
					},
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, the specified actions will only execute if this condition is fulfilled by the bed block."
					}
				},
				"anyOf": [ {"required": ["entity_action"]}, {"required": ["block_action"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_over_time"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_over_time/"
			},
			"then": {
				"properties": {
					"interval": {
						"type": "integer",
						"description": "Interval of ticks between subsequent executions of the specified actions.",
						"minimum": 1,
						"default": 20
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the entity that has the power each interval."
					},
					"rising_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the first interval tick in which the condition became true."
					},
					"falling_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the first interval tick in which the condition became false."
					}
				},
				"anyOf": [ {"required": ["entity_action"]}, {"required": ["rising_action"]}, {"required": ["falling_action"]} ],
				"dependencies": {
					"rising_action": ["condition"],
					"falling_action": ["condition"]
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_when_damage_taken"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_when_damage_taken/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to be executed upon taking damage."
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the action will only trigger when this condition holds for the specified type of damage."
					},
					"cooldown": {
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"type": "integer",
						"minimum": 0
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD.",
						"default": {"should_render":false}
					}
				},
				"required": ["entity_action", "cooldown"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:action_when_hit"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/action_when_hit/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "The action to be executed on either or both 'actor' (the attacker entity) entity and 'target' (the entity that has the power) entity."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the specified action will only trigger if this condition is fulfilled by either or both 'actor' (the attacker entity) entity and 'target' (the entity that has the power) entity."
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified action will only trigger when this condition holds for the specified type of damage."
					},
					"cooldown": {
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"type": "integer",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD.",
						"default": {"should_render": false}
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:active_self"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/active_self/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "Determines how the cooldown of this power is visualized on the HUD.",
						"default":{"should_render":false}
					},
					"key": {
						"$ref": "./data_types/key.json",
						"description": "Which active key this power should respond to.",
						"default":{"key":"key.origins.primary_active"}
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:attacker_action_when_hit"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/attacker_action_when_hit/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the attacker."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If set, the action will only trigger when this condition holds for the damage that was dealt by the attacker."
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "If specified, determines how the cooldown of this power is visualized on the HUD.",
						"default":{"should_render":false}
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:self_action_on_hit", "origins:self_action_on_kill"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/self_action_on_hit/ https://origins.readthedocs.io/en/latest/types/power_types/self_action_on_kill/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the entity."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "If specified, determines how the cooldown of this power is visualized on the HUD.",
						"default":{"should_render":false}
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified action will only be executed if the damage dealt is fulfills this condition."
					},
					"target_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, the specified actions will only be executed if the entity/entities that has been hit/killed fulfills this condition."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:self_action_when_hit"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/self_action_when_hit/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the player."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "If set, the cooldown of this power is visualized on the HUD in the specified way.",
						"default":{"should_render":false}
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified action will only execute if the damage taken fulfills this condition."
					}
				},
				"required": ["entity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:target_action_on_hit"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/target_action_on_hit/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "The action to execute on the target."
					},
					"cooldown": {
						"type": "integer",
						"description": "Interval of ticks this power needs to recharge before the power can be triggered again.",
						"minimum": 0,
						"default": 1
					},
					"hud_render": {
						"$ref": "./data_types/hud_render.json",
						"description": "If specified, determines how the cooldown of this power is visualized on the HUD."
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified action will only execute if the damage dealt by the entity that has the power fulfills this condition."
					},
					"target_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, the specified action will only execute if the entity that has been hit fulfills this condition."
					}
				},
				"required": ["entity_action"]
			},
			"$comment": "#endregion Action-related"
		},
		{
			"$comment": "#region Modifying types",
			"if": {
				"properties": { "type": { "enum": [
					"origins:modify_air_speed", "origins:modify_exhaustion", "origins:modify_healing", "origins:modify_insomnia_ticks",
					"origins:modify_lava_speed", "origins:modify_swim_speed", "origins:modify_xp_gain"
				] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/#modifying_types"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the value."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the value.",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_attribute"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_attribute/"
			},
			"then": {
				"properties": {
					"attribute": {
						"description": "The namespace and ID of the attribute to apply the modifier(s) to.\nRefer to https://minecraft.fandom.com/wiki/Attribute for a list of vanilla attributes that you can modify.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:generic.attack_damage"]
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the specified attribute."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the specified attribute.",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"required": ["attribute"],
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_block_render"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_block_render/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, only modify how the blocks that fulfill this condition would look like."
					},
					"block": {
						"description": "The namespace and ID of the replacement block\nCurrently, this power type does not work properly if you have installed a mod that changes the rendering engine, such as Sodium.\nThis power type does not support a condition. If the condition field is present, it will be ignored.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:diamond_block"]
					}
				},
				"required": ["block"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_break_speed"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_break_speed/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, the modifier(s) will only apply to the blocks that fulfills this condition."
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the break speed."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the break speed.",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_camera_submersion"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_camera_submersion/"
			},
			"then": {
				"properties": {
					"from": {
						"enum": ["none", "water", "lava"],
						"description": "Which submersion type to modify. Can be none, water or lava."
					},
					"to": {
						"enum": ["none", "water", "lava"],
						"description": "Which submersion type to change to. Can be none, water or lava."
					}
				},
				"required": ["to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_crafting"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_crafting/"
			},
			"then": {
				"properties": {
					"recipe": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, modifies the result item of the recipe that matches the specified namespace and ID.\nThis power type cannot modify the result item from recipes added by the Recipe Power Type."
					},
					"item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the result item of a recipe."
					},
					"item_action_after_crafting": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the result item of a recipe after crafting the said recipe."
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player upon crafting a recipe."
					},
					"block_action": {
						"$ref": "./actions/block.json",
						"description": "If specified, this action will be executed on the block used for crafting a recipe."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the item from the `result` field and the specified actions will only be applied if this condition is fulfilled by the result item of a recipe."
					},
					"result": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item will replace the item of a recipe."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_damage_dealt"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_damage_dealt/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "If specified, this bi-entity action type will be executed on either or both 'actor' (the entity that has the power) and 'target' (the entity that has been hit)."
					},
					"self_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the entity that has the power whenever the modifier(s) is applied."
					},
					"target_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the entity/entities that has been hit whenever the modifier(s) is applied."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the specified modifier(s) and/or action(s) will only apply if either or both 'actor' (the entity that has the power) and 'target' (the entity that has been hit) fulfills this bi-entity condition type."
					},
					"target_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, the specified modifier(s) and action(s) will only be applied if the entity/entities that has been hit fulfills this condition."
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified modifier(s) and/or action(s) will only apply if the dealt damage fulfills this condition."
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the damage amount.",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_damage_taken"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_damage_taken/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "If specified, this action will be executed on either or both the 'actor' and 'target' entities whenever the modifier(s) is/are applied."
					},
					"self_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the 'target' entity whenever the modifier(s) is/are applied."
					},
					"attacker_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the 'actor' entity whenever the modifier(s) is/are applied."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the specified action(s)/modifier(s) will only be executed/applied if this condition is fulfilled by either or both 'actor' and 'target' entities."
					},
					"apply_armor_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, armor will only be applied to the damage taken if this condition is fulfilled by the 'target' entity."
					},
					"damage_armor_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, worn armor will only be damaged if this condition is fulfilled by the 'target' entity."
					},
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified modifiers(s) and/or action(s) will only apply if the taken damage fulfills this condition."
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the damage taken by the 'target' entity."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the damage taken by the 'target' entity.",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_falling"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_falling/"
			},
			"then": {
				"properties": {
					"velocity": {
						"description": "Determines the speed of the falling velocity.\nBy default, the player falls at a speed of 0.08, or 0.01 if a slow falling potion is active.",
						"type":"number"
					},
					"take_fall_damage": {
						"description": "Determines whether the entity should take fall damage or not.",
						"type":"boolean",
						"default":true
					}
				},
				"required": ["velocity"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_fluid_render"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_fluid_render/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, only modify how the blocks that fulfills this condition would look like."
					},
					"fluid_condition": {
						"$ref": "./conditions/fluid.json",
						"description": "If specified, only modify how the fluids that fulfills this condition would look like."
					},
					"fluid": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the replacement fluid.",
						"examples": ["minecraft:water", "minecraft:lava"]
					}
				},
				"required": ["fluid"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_food"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_food/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the specified actions and modifier(s) will only apply to food items that fulfills this condition."
					},
					"item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this item action type will be executed on the remaining item stacks that was consumed."
					},
					"replace_stack": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item stack will replace the item stack that was consumed after consuming it."
					},
					"food_modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will apply to the food amount gained by eating a food item."
					},
					"food_modifiers": {
						"description": "If specified, these modifiers will apply to the food amount gained by eating a food item.",
						"type": "array",
						"items": {"$ref": "./data_types/modifier.json"}
					},
					"saturation_modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will apply to the saturation amount gained by eating a food item."
					},
					"saturation_modifiers": {
						"description": "If specified, these modifiers will apply to the saturation amount gained by eating a food item.",
						"type": "array",
						"items": {"$ref": "./data_types/modifier.json"}
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player that has ate a food item."
					},
					"always_edible": {
						"description": "Determines whether a food item can be eaten regardless of the player's hunger bar being full.",
						"type":"boolean",
						"default":false
					},
					"prevent_effects": {
						"description": "If set to `true`, prevent status effects from being applied.",
						"type":"boolean",
						"default":false
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_grindstone"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_grindstone/"
			},
			"then": {
				"properties": {
					"result_type": {
						"description": "Determines whether to not change the initial item stack (\"unchanged\"), replace it with the item stack specified in the result_stack field (\"specified\"), replace it with the item stack from the top input slot of a Grindstone block (\"from_top\") or replace it with the item stack from the bottom input slot of a Grindstone block (\"from_bottom\").",
						"enum": ["unchanged", "specified", "from_top", "from_bottom"],
						"default": "unchanged"
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the player upon taking the item stack from the result slot of a Grindstone."
					},
					"block_action": {
						"$ref": "./actions/block.json",
						"description": "If specified, this action will be executed on the Grindstone block upon taking the item stack from the result slot of the said Grindstone block."
					},
					"item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the result item stack."
					},
					"item_action_after_grinding": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the result item stack after the grinding process."
					},
					"top_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the specified actions will only be executed if the item stack from the top input slot of the Grindstone fulfills this condition."
					},
					"bottom_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the specified actions will only be executed if the item stack from the bottom input slot of the Grindstone fulfills this condition."
					},
					"output_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, the specified actions will only be executed if the item stack from the output/result slot of the Grindstone fulfills this condition."
					},
					"result_stack": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item stack will be used as a replacement only if the `result_type` field has a value of `\"specified\"`."
					},
					"xp_modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the value of the experience received from removing an enchantment from an item stack."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_harvest"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_harvest/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, only blocks that fulfill this condition are affected."
					},
					"allow": {
						"description": "Determines whether the player is be able to harvest the block.",
						"type": "boolean"
					}
				},
				"required": ["allow"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_jump"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_jump/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the upwards velocity."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will be applied to the upwards velocity.",
						"items": {"$ref": "./data_types/modifier.json"}
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the entity that has the power whenever the entity jumps."
					}
				},
				"not": {"required": ["modifier", "modifiers"]},
				"anyOf": [
					{"required": ["modifier"]},
					{"required": ["modifiers"]},
					{"required": ["entity_action"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const": "origins:modify_player_spawn"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_player_spawn/"
			},
			"then": {
				"properties": {
					"dimension": {
						"description": "The namespace and ID of the dimension the player should spawn in.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:overworld", "minecraft:the_nether", "minecraft:the_end"]
					},
					"biome": {
						"type": "string",
						"description": "If specified, the player will only spawn in the biome that matches the specified namespace and ID.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:savanna"]
					},
					"structure": {
						"type": "string",
						"description": "If specified, the player will only spawn in the specified namespace and ID of the structure.\nThe structure needs to generate in the specified dimension!\nKeep in mind that structure location is costly and it might take one or two seconds before the player gets teleported when choosing the power.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:endcity"]
					},
					"spawn_strategy": {
						"type": "string",
						"description": "Determines whether the player should spawn near the world spawnpoint (0, 0) of the dimension (`\"center\"`) or near the coordinates of the Overworld spawnpoint (whilst considering the value of the `dimension_distance_multiplier` field) (`\"default\"`).",
						"enum": ["default", "center"],
						"default": "default"
					},
					"dimension_distance_multiplier": {
						"type": "number",
						"description": "Defines the ratio of Overworld blocks to blocks in the specified dimension.\ne.g: for The Nether dimension, this would be set to `0.125`.\nThis needs to be set when `spawn_strategy` is set to `\"default\"`!",
						"examples": [1, 0.125]
					}
				},
				"required": ["dimension"],
				"if": { "properties": { "spawn_strategy": {"const": "default"} } },
				"then": { "required": ["dimension_distance_multiplier"] }
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_projectile_damage"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_projectile_damage/"
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, the specified modifier(s) and action(s) will only apply if the dealt damage fulfills by this condition.",
						"examples": [{"type": "origins:projectile", "projectile": "minecraft:spectral_arrow"}]
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will apply to the damage amount."
					},
					"modifiers": {
						"description": "If specified, these modifiers will apply to the damage amount.",
						"type": "array",
						"items": {"$ref":"./data_types/modifier.json"}
					},
					"target_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, the specified modifier(s) and action(s) will only apply if the the entity that has been hit fulfills this condition."
					},
					"self_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the 'actor' entity (the entity that has the power) whenever the modifier(s) are applied."
					},
					"target_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the the entity that has been hit whenever the modifier(s) are applied."
					}
				},
				"anyOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]}, {"required": ["self_action"]}, {"required": ["target_action"]} ],
				"not": {"required": ["modifier", "modifiers"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_slipperiness"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_slipperiness/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, the modifier(s) will only apply to the blocks that fulfills this condition."
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the entity's slipperiness."
					},
					"modifiers": {
						"description": "If specified, these modifiers will be applied to the entity's slipperiness.",
						"type": "array",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"enum":["origins:modify_status_effect_amplifier", "origins:modify_status_effect_duration"]} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_status_effect_amplifier/ https://origins.readthedocs.io/en/latest/types/power_types/modify_status_effect_duration/"
			},
			"then": {
				"properties": {
					"status_effect": {
						"type":"string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, only this status effect will have its amplifier/duration modified upon being received."
					},
					"status_effects": {
						"description": "If specified, only these status effects will have its amplifier/duration modified upon being received.",
						"type":"array",
						"items": {
							"type":"string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
						}
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will be applied to the amplifier/duration of the specified status effect(s)."
					},
					"modifiers": {
						"description": "If specified, these modifiers will be applied to the amplifier of the specified status effect(s).",
						"type":"array",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"allOf": [
					{"oneOf": [{"required": ["status_effect"]}, {"required": ["status_effects"]}]},
					{"oneOf": [{"required": ["modifier"]}, {"required": ["modifiers"]}]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_velocity"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/modify_velocity/"
			},
			"then": {
				"properties": {
					"axes": {
						"description": "Used to specify the axes affected by this modifier.",
						"type":"array",
						"items": {"enum":["x","y","z"]},
						"uniqueItems": true,
						"default": ["x","y","z"]
					},
					"modifier": {
						"$ref": "./data_types/modifier.json",
						"description": "If specified, this modifier will apply to velocity in the specified axes."
					},
					"modifiers": {
						"type": "array",
						"description": "If specified, these modifiers will apply to the specified axes.",
						"items": {"$ref": "./data_types/modifier.json"}
					}
				},
				"oneOf": [ {"required": ["modifier"]}, {"required": ["modifiers"]} ]
			},
			"$comment": "#endregion Modifying types"
		},
		{
			"$comment": "#region Preventing types",
			"if": {
				"properties": { "type": {"const":"origins:prevent_being_used"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_being_used/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "If specified, this action will be executed on either or both 'actor' (player) or 'target' (the entity that has the power) entities."
					},
					"held_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' (the entity that has the power) entity in the 'actor' (player) entity's specified hand(s) determined by the `hands` string array field."
					},
					"result_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (player) entity."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by either or both 'actor' (player) or 'target' (the entity that has the power) entities."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (player) entity's specified hand(s) determined by the `hands` string array field."
					},
					"hands": {
						"description": "Determines if the power should be activated if the 'actor' entity used the specified hand(s).",
						"type": "array",
						"items": {"enum": ["off_hand", "main_hand"]},
						"uniqueItems": true,
						"default": ["off_hand", "main_hand"]
					},
					"result_stack": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item will be given to the 'actor' (player) entity."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"enum":["origins:prevent_block_selection", "origins:prevent_block_use"]} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_block_selection/ https://origins.readthedocs.io/en/latest/types/power_types/prevent_block_use/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, only blocks that fulfill this condition are affected."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_death"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_death/"
			},
			"then": {
				"properties": {
					"damage_condition": {
						"$ref": "./conditions/damage.json",
						"description": "If specified, death will only be prevented if the damage dealt to the entity fulfills this condition."
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the entity when death is prevented."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_elytra_flight"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_elytra_flight/"
			},
			"then": {
				"properties": {
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, execute this entity action type upon preventing the entity that has the power."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_entity_collision"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_entity_collision/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the collision will only be prevented if this condition is fulfilled by either or both 'actor' (the entity with the power) and 'target' entities."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_entity_render"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_entity_render/"
			},
			"then": {
				"properties": {
					"entity_condition": {
						"$ref": "./conditions/entity.json",
						"description": "If specified, only entities which fulfills this condition will be affected."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, the power will only be active if this condition is fulfilled by either or both the 'actor' (the player that has the power) and 'target' (the entity that will not render) entities."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_entity_use"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_entity_use/"
			},
			"then": {
				"properties": {
					"bientity_action": {
						"$ref": "./actions/bientity.json",
						"description": "If specified, this action will be executed on either or both 'actor' (the player that has the power) or 'target' (the entity that is right-clicked) entities."
					},
					"held_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item used for right-clicking the 'target' (the entity that is right-clicked) entity in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string array field."
					},
					"result_item_action": {
						"$ref": "./actions/item.json",
						"description": "If specified, this action will be executed on the item that is given to the 'actor' (the player that has the power) entity."
					},
					"bientity_condition": {
						"$ref": "./conditions/bientity.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by either or both 'actor' (the player that has the power) or 'target' (the entity that is right-clicked) entities."
					},
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, only execute the specified actions if this condition is fulfilled by the item in the 'actor' (the player that has the power) entity's specified hand(s) determined by the `hands` string array field."
					},
					"hands": {
						"type": "array",
						"description": "Determines if the power should be activated if the 'actor' entity used the specified hand(s).",
						"items": {"enum": ["off_hand", "main_hand"]},
						"uniqueItems": true,
						"default": ["off_hand", "main_hand"]
					},
					"result_stack": {
						"$ref": "./data_types/item_stack.json",
						"description": "If specified, this item will be given to the 'actor' (the player that has the power) entity."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_feature_render"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_feature_render/"
			},
			"then": {
				"properties": {
					"feature": {
						"description": "If specified, this feature renderer will not be rendered.",
						"enum": [
							"armor", "cape", "cat_collar", "deadmau5", "dolphin_held_item", "drowned_overlay", "elytra", "enderman_block",
							"energy_swirl_overlay", "eyes", "fox_held_item", "head", "held_item", "horse_armor", "horse_marking",
							"iron_golem_crack", "iron_golem_flower", "llama_decor", "mooshroom_mushroom", "panda_held_item", "saddle",
							"sheep_wool", "shoulder_parrot", "shulker_head", "slime_overlay", "snowman_pumpkin", "stray_overlay",
							"stuck_objects", "trident_riptide", "tropical_fish_color", "villager_clothing", "villager_held_item",
							"wolf_collar"
						]
					},
					"features": {
						"description": "If specified, these feature renderers will not be rendered.",
						"type": "array",
						"items": { "enum": [
							"armor", "cape", "cat_collar", "deadmau5", "dolphin_held_item", "drowned_overlay", "elytra", "enderman_block",
							"energy_swirl_overlay", "eyes", "fox_held_item", "head", "held_item", "horse_armor", "horse_marking",
							"iron_golem_crack", "iron_golem_flower", "llama_decor", "mooshroom_mushroom", "panda_held_item", "saddle",
							"sheep_wool", "shoulder_parrot", "shulker_head", "slime_overlay", "snowman_pumpkin", "stray_overlay",
							"stuck_objects", "trident_riptide", "tropical_fish_color", "villager_clothing", "villager_held_item",
							"wolf_collar"
						] },
						"uniqueItems": true
					}
				},
				"oneOf": [ {"required": ["feature"]}, {"required": ["features"]} ]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_game_event"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_game_event/"
			},
			"then": {
				"properties": {
					"event": {
						"type":"string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, the game event with this namespace and ID will be prevent from being emitted by the entity.\nSee https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes",
						"examples": ["minecraft:hit_ground"]
					},
					"events": {
						"type": "array",
						"description": "If specified, the game events with these namespace and IDs will be prevent from being emitted by the entity.\nSee https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes",
						"items": {
							"type":"string",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": ["minecraft:hit_ground"]
						},
						"uniqueItems": true
					},
					"tag": {
						"type":"string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "If specified, the game events inside game event tag will be prevented from being emitted by the entity."
					},
					"entity_action": {
						"$ref": "./actions/entity.json",
						"description": "If specified, this action will be executed on the entity upon preventing game events."
					}
				},
				"not": {"required": ["event", "events"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_item_use"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_item_use/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "./conditions/item.json",
						"description": "If specified, only items that fulfills this condition will be prevented from being used."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:prevent_sleep"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/power_types/prevent_sleep/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "./conditions/block.json",
						"description": "If specified, sleep will only be prevented if this condition is fulfilled by the bed block."
					},
					"message": {
						"type": "string",
						"description": "The message that will be shown when sleep is prevented this way. Can be a literal text or a translation key which will be localized using a language file.",
						"default": "origins.cant_sleep"
					},
					"set_spawn_point": {
						"type": "boolean",
						"description": "Determines whether the spawnpoint of the player is set upon right-clicking a bed while being prevented. (similar to what happens when you right-click a bed while it's daytime)",
						"default": false
					}
				}
			},
			"$comment": "#endregion Preventing types"
		}
	]
}