{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "origins_entity_condition",
	"description": "Entity Condition Types operate on an Entity, which also allows access to the world. These are available to be used in most powers in the condition object field (or entity_condition in other power/condition types), which restricts when a power is active.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"description": "ID and namespace of the entity condition to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/",
			"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
			"examples": [
				"origins:and", "origins:constant", "origins:or",
				"origins:ability", "origins:advancement", "origins:air", "origins:attribute", "origins:biome", "origins:block_collision",
				"origins:block_in_radius", "origins:brightness", "origins:climbing", "origins:collided_horizontally", "origins:command",
				"origins:creative_flying", "origins:daytime", "origins:dimension", "origins:distance_from_coordinates",
				"origins:elytra_flight_possible", "origins:enchantment", "origins:entity_group", "origins:entity_type",
				"origins:equipped_item", "origins:exists", "origins:exposed_to_sky", "origins:exposed_to_sun", "origins:fall_distance",
				"origins:fall_flying", "origins:fluid_height", "origins:food_level", "origins:gamemode", "origins:health",
				"origins:in_block_anywhere", "origins:in_block", "origins:in_rain", "origins:in_tag", "origins:invisible", "origins:living",
				"origins:moving", "origins:nbt", "origins:on_block", "origins:on_fire", "origins:origin", "origins:passenger_recursive",
				"origins:passenger", "origins:power_active", "origins:power_type", "origins:power", "origins:predicate", "origins:raycast",
				"origins:relative_health", "origins:resource", "origins:riding_recursive", "origins:riding_root", "origins:riding",
				"origins:saturation_level", "origins:scoreboard", "origins:sneaking", "origins:sprinting", "origins:status_effect",
				"origins:submerged_in", "origins:swimming", "origins:tamed", "origins:time_of_day", "origins:using_effective_tool",
				"origins:using_item", "origins:xp_levels", "origins:xp_points"
			]
		},
		"inverted": {
			"type": "boolean",
			"description": "If true, the condition acts inverted.",
			"default": false
		}
	},
	"required": ["type"],
	"allOf": [
		{
			"$comment": "#region meta",
			"if": {
				"properties": { "type": {"const":"origins:and"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"conditions": {
						"type": "array",
						"description": "All of these conditions have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/and/",
						"items": {"$ref": "#"},
						"minItems": 2
					}
				},
				"required": ["conditions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:constant"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"value": {
						"type": "boolean",
						"description": "If true, the condition is always fulfilled. If false, the condition is never fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/constant/"
					}
				},
				"required": ["value"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:or"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"conditions": {
						"type": "array",
						"description": "Any of these condition types have to be fulfilled in order for this condition to be fulfilled.\nSee https://origins.readthedocs.io/en/latest/types/meta_condition_types/or/",
						"items": {"$ref": "#"},
						"minItems": 2
					}
				},
				"required": ["conditions"]
			},
			"$comment": "#endregion meta"
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:ability"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/ability/"
			},
			"then": {
				"properties": {
					"ability": {
						"type": "string",
						"description": "The namespace and ID of the ability to check for.\nSee https://origins.readthedocs.io/en/latest/misc/extras/player_abilities/ for a list of vanilla Player Abilities",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:flying", "minecraft:instabuild", "minecraft:invulnerable", "minecraft:mayBuild", "minecraft:mayfly"]
					}
				},
				"required": ["ability"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:advancement"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/advancement/"
			},
			"then": {
				"properties": {
					"advancement": {
						"type": "string",
						"description": "The namespace and ID of the advancement the player needs to have completed in order for this condition to evaluate to true.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:story/smelt_iron"]
					}
				},
				"required": ["advancement"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:air"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/air/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the breath / air / bubble bar (in ticks) should be compared to the specified value.\nPlayers (and most mobs) have a max value of 300 ticks, whilst dolphins have a max value of 4800 ticks. Axolotls, on the other hand, have a max value of 6000 ticks.\nIn order to get the value of a single bubble, you can divide the max value by 10. (max / 10 = value)",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value the breath should be compared to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:attribute"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/attribute/"
			},
			"then": {
				"properties": {
					"attribute": {
						"type": "string",
						"description": "ID of the attribute of which the value should be checked. See https://minecraft.fandom.com/wiki/Attribute#Attributes for a list of vanilla attributes that can be checked for.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": [
							"minecraft:generic.max_health", "minecraft:generic.follow_range",
							"minecraft:generic.knockback_resistance", "minecraft:generic.movement_speed",
							"minecraft:generic.attack_damage", "minecraft:generic.armor",
							"minecraft:generic.armor_toughness", "minecraft:generic.attack_knockback",
							"minecraft:generic.attack_speed", "minecraft:generic.luck",
							"minecraft:horse.jump_strength",
							"minecraft:generic.flying_speed",
							"minecraft:zombie.spawn_reinforcements"
						]
					},
					"comparison": {
						"description": "How to compare the attribute's value to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "Which value to compare the attribute's value to."
					}
				},
				"required": ["attribute", "comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:biome"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/biome/"
			},
			"then": {
				"properties": {
					"biome": {
						"type": "string",
						"description": "If specified, only evaluate the condition to true if the biome the entity is in matches the specified namespace and ID.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:savanna", "minecraft:plains"]
					},
					"biomes": {
						"type": "array",
						"description": "If specified, only evaluate the condition to true if the biome the entity is in matches one of the specified namespace and IDs.",
						"items": {
							"type": "string",
							"description": "Only evaluate the condition to true if the biome the entity is in matches the specified namespace and ID.",
							"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
							"examples": [["minecraft:savanna", "minecraft:plains"]]
						},
						"minItems": 1
					},
					"condition": {
						"$ref": "../conditions/biome.json",
						"description": "If specified, only evaluate the condition to true if the biome the entity is in fulfills the specified biome condition type."
					}
				},
				"$comment": "May not have both \"biome\" and \"biomes\" and must include at least on of the properties.",
				"not": {"required": ["biome", "biomes"]},
				"anyOf": [{"required": ["biome"]}, {"required": ["biomes"]}, {"required": ["condition"]}]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:block_collision"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/block_collision/"
			},
			"then": {
				"properties": {
					"offset_x": {
						"type": "number",
						"description": "By how much of the bounding box size should the box be offset in the X direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
					},
					"offset_y": {
						"type": "number",
						"description": "By how much of the bounding box size should the box be offset in the Y direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
					},
					"offset_z": {
						"type": "number",
						"description": "By how much of the bounding box size should the box be offset in the Z direction (e.g.: 0 = no offset, 1 = offset of exact width, 2 = offset of twice the width of the bounding box)"
					}
				},
				"required": ["offset_x", "offset_y", "offset_z"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:block_in_radius"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/block_in_radius/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "../conditions/block.json",
						"description": "The block condition type to check for."
					},
					"radius": {
						"type": "integer",
						"description": "The radius to check the blocks that fulfills the specified block condition type within."
					},
					"shape": {
						"description": "Determines the shape of the radius. Accepts \"cube\", \"star\" or \"sphere\".",
						"enum": ["cube", "star", "sphere"],
						"default": "cube"
					},
					"comparison": {
						"description": "How the amount of blocks within the specified radius which fulfills the specified block condition type should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="],
						"default": ">="
					},
					"compare_to": {
						"type": "integer",
						"description": "The value to compare the amount to.",
						"default": 1
					}
				},
				"required": ["block_condition", "radius"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:brightness"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/brightness/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How to compare the brightness against the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "Which value to compare the brightness against.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/brightness/",
						"minimum": 0,
						"maximum": 1
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:command"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/command/"
			},
			"then": {
				"properties": {
					"command": {
						"type": "string",
						"description": "The command to execute.\norigins:command is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
						"examples": ["execute if score @s objective1 = @s objective2"]
					},
					"comparison": {
						"description": "How to compare the stored result of the specified command to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "The value to compare the stored result of the specified command to."
					},
					"permission_level": {
						"type": "integer",
						"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
						"default": 4,
						"minimum": 0,
						"maximum": 4,
						"deprecated": true
					}
				},
				"required": ["command", "comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:dimension"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/dimension/"
			},
			"then": {
				"properties": {
					"dimension": {
						"type": "string",
						"description": "The namespace and ID of the dimension the player needs to be in for this condition to evaluate to true.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:overworld", "minecraft:the_nether", "minecraft:the_end"]
					}
				},
				"required": ["dimension"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:distance_from_coordinates"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/distance_from_coordinates/"
			},
			"then": {
				"properties": {
					"reference": {
						"description": "The point to compare the distance to. Accepts \"world_origin\" or \"world_spawn\".",
						"enum": ["world_origin", "world_spawn"],
						"default": "world_origin"
					},
					"offset": {
						"$ref": "../data_types/vector.json",
						"description": "If specified, determines how much the reference point should be offset."
					},
					"ignore_x": {
						"type":"boolean",
						"description": "Determines whether to consider the X axis to be 0.",
						"default": false
					},
					"ignore_y": {
						"type":"boolean",
						"description": "Determines whether to consider the Y axis to be 0.",
						"default": false
					},
					"ignore_z": {
						"type":"boolean",
						"description": "Determines whether to consider the Z axis to be 0.",
						"default": false
					},
					"shape": {
						"description": "Determines the shape of the check.Determines the shape of the check. Accepts \"cube\", \"star\" or \"sphere\".",
						"enum": ["cube", "star", "sphere"],
						"default": "cube"
					},
					"scale_reference_to_dimension": {
						"type":"boolean",
						"description": "Determines whether to check for the reference point whilst considering the coordinate scale of the dimension.",
						"default": true
					},
					"result_on_the_wrong_dimension": {
						"type":"boolean",
						"description": "If specified, this value will override the result of the comparison if the block being tested is not in the reference's dimension."
					},
					"round_to_digit": {
						"type":"integer",
						"description": "If specified, rounds the result to the closest number with the specified amount of digits after the comma. Negative numbers also work (e.g: -2 rounds to multiples of 100)."
					},
					"comparison": {
						"description": "Determines how the calculated distance is compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "The value to compare the calculated distance to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:elytra_flight_possible"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/elytra_flight_possible/"
			},
			"then": {
				"properties": {
					"check_state": {
						"type":"boolean",
						"description": "Determines if the condition should check if the entity is currently flying with an elytra.",
						"default": false
					},
					"check_abilities": {
						"type":"boolean",
						"description": "Determines if the condition should check if the entity can fly with an elytra.",
						"default": true
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:enchantment"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/enchantment/"
			},
			"then": {
				"properties": {
					"enchantment": {
						"type": "string",
						"description": "The namespace and ID of the enchantment of interest.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:protection"]
					},
					"calculation": {
						"description": "Which number to compare - either the sum of levels of this enchantment on all of the player's equipment, or the max level of this enchantment on any of the player's equipment.",
						"enum": ["sum", "max"],
						"default": "sum"
					},
					"comparison": {
						"description": "How the enchantment level should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "The value to compare the enchantment level to."
					}
				},
				"required": ["enchantment", "comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:entity_group"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_group/"
			},
			"then": {
				"properties": {
					"group": {
						"description": "Entity group required for the entity to pass the check. One of default, undead, arthropod, illager and aquatic.\nSee https://minecraft.fandom.com/wiki/Mob#Classification for more information about entity groups.",
						"enum": ["default", "undead", "arthropod", "illager", "aquatic"]
					}
				},
				"required": ["group"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:entity_type"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_type/"
			},
			"then": {
				"properties": {
					"entity_type": {
						"type": "string",
						"description": "The namespace and ID of the entity type the entity needs to have to pass the check.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:creeper"]
					}
				},
				"required": ["entity_type"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:equipped_item"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/equipped_item/"
			},
			"then": {
				"properties": {
					"equipment_slot": {
						"description": "Determines which equipment slot to check for the item. Accepts \"mainhand\", \"offhand\", \"head\", \"chest\", \"legs\", \"feet\".",
						"enum": ["mainhand", "offhand", "head", "chest", "legs", "feet"]
					},
					"item_condition": {
						"$ref": "../conditions/item.json",
						"description": "The item condition type to check for on the item in the specified equipment slot."
					}
				},
				"required": ["equipment_slot", "item_condition"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:fall_distance"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/fall_distance/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the fall distance should be compared to the specified value.\nNote that the fall distance is 0 if the entity has the Slow Falling status effect.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "The value to compare the fall distance to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:fluid_height"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/fluid_height/"
			},
			"then": {
				"properties": {
					"fluid": {
						"type": "string",
						"description": "The namespace and ID of the fluid tag of which the height should be checked.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:water", "minecraft:lava"]
					},
					"comparison": {
						"description": "How the fluid height should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "Which value the fluid height should be compared to."
					}
				},
				"required": ["fluid", "comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:food_level"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/food_level/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the food level should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "Which value the food level should be compared to.\nThis entity condition type will only work on players.",
						"minimum": 0, "maximum": 20
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:gamemode"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/gamemode/"
			},
			"then": {
				"properties": {
					"gamemode": {
						"description": "Name of the gamemode the player should have in order for this condition to evaluate to true.",
						"examples": ["adventure", "creative", "spectator", "survival"]
					}
				},
				"required": ["gamemode"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:health"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/health/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the health of the player should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "Which value the health should be compared to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:in_block_anywhere"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_block_anywhere/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "../conditions/block.json",
						"description": "The block condition type which blocks need to fulfill in order to count for this condition."
					},
					"comparison": {
						"description": "How the number of blocks which overlap and fulfill block_condition should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="],
						"default": ">="
					},
					"compare_to": {
						"type": "integer",
						"description": "The value to compare the number to.",
						"default": 1
					}
				},
				"required": ["block_condition"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:in_block"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/in_block/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "../conditions/block.json",
						"description": "The block condition type to check for on the block that is overlapping with the entity's feet."
					}
				},
				"required": ["block_condition"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:in_tag"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/entity_conditions/in_tag/"
			},
			"then": {
				"properties": {
					"tag": {
						"type": "string",
						"description": "The namespace and ID of the entity type tag the entity type needs to be in to pass the check.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:skeletons"]
					}
				},
				"required": ["tag"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:nbt"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/nbt/"
			},
			"then": {
				"properties": {
					"nbt": {
						"type": "string",
						"description": "The NBT data to check for.\norigins:nbt is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
						"pattern": "\\{.*\\:.*\\}",
						"examples": ["{Tags: ['example_tag']}"]
					}
				},
				"required": ["nbt"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:on_block"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/on_block/"
			},
			"then": {
				"properties": {
					"block_condition": {
						"$ref": "../conditions/block.json",
						"description": "If specified, the condition will evaluate to true if the block underneath the entity's feet fulfills the specified block condition type. Otherwise, only check if the entity is on the ground."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:origin"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/origin/"
			},
			"then": {
				"properties": {
					"origin": {
						"type": "string",
						"description": "The namespace and ID of the origin the player needs to have to pass the check.\nThis condition will evaluate to false if the entity is not a player.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/entity_type/",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:human"]
					},
					"layer": {
						"type": "string",
						"description": "If specified, only evaluate the condition to true if the origin is from the specified origin layer.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:origin"]
					}
				},
				"required": ["origin"]
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:passenger_recursive", "origins:passenger"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger_recursive/ https://origins.readthedocs.io/en/latest/types/entity_condition_types/passenger/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, it will check for the entity/entities that fulfill the bi-entity condition."
					},
					"comparison": {
						"description": "How the number of entities that are currently riding the entity should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="],
						"default": ">="
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value the number of entities currently riding the entity should be compared to.",
						"default": 1
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:power_active"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/power_active/"
			},
			"then": {
				"properties": {
					"power": {
						"type": "string",
						"description": "The namespace and ID of the power which will be checked for being active. (Meaning the entity has the power and the power has all conditions fulfilled.)",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:phantomize"]
					}
				},
				"required": ["power"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:power_type"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/power_type/"
			},
			"then": {
				"properties": {
					"power": {
						"type": "string",
						"description": "The namespace and ID of the Power Type of a power the entity has.\nSee https://origins.readthedocs.io/en/latest/types/power_types/",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:active_self"]
					}
				},
				"required": ["power"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:power"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/power/"
			},
			"then": {
				"properties": {
					"power": {
						"type": "string",
						"description": "The namespace and ID of the power the entity needs to have to pass the check.\nSince only Living Entities can have powers, using this entity condition on a non-living entity might crash the game.\nAlways make sure to check if the entity is a Living Entity by using the Living (Entity Condition Type) to prevent your game from crashing.\nSee https://origins.readthedocs.io/en/latest/types/entity_condition_types/living/",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:phantomize", "origins:damage_from_potions"]
					},
					"source": {
						"type": "string",
						"description": "If specified, the condition will check if the power is from the specified power source.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					}
				},
				"required": ["power"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:predicate"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/predicate/"
			},
			"then": {
				"properties": {
					"predicate": {
						"type": "string",
						"description": "The namespace and ID of the predicate the entity needs to pass.\nNote: This condition is only effective server-side. That means client-side power types such as origins:climbing, origins:entity_glow, origins:shader, etc. won't work with this.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["example:weather/is_thunderstorm"]
					}
				},
				"required": ["predicate"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:raycast"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/raycast/"
			},
			"then": {
				"properties": {
					"distance": {
						"type":"number",
						"description": "Determines the maximum distance the ray-cast will travel."
					},
					"block": {
						"type":"boolean",
						"description": "Determines whether the ray-cast should include blocks.",
						"default": true
					},
					"entity": {
						"type":"boolean",
						"description": "Determines whether the ray-cast should include entities.",
						"default": true
					},
					"shape_type": {
						"description": "Determines how the ray-cast will handle blocks.",
						"enum": ["collider", "outline", "visual"],
						"default": "visual"
					},
					"fluid_handling": {
						"description": "Determines how the ray-cast will handle fluids.",
						"enum": ["any", "none", "source_only"],
						"default": "any"
					},
					"match_bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (entity that the ray-cast has gone through). If not, the entity will be ignored."
					},
					"hit_bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, the entity condition type will check if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity being checked by the entity condition type) and 'target' (the entity that has hit by the ray-cast)."
					},
					"block_condition": {
						"$ref": "#/properties/block_condition",
						"description": "If specified, the entity condition type will check if the block that was hit by the ray-cast fulfills this block condition type."
					}
				},
				"required": ["distance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:relative_health"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/relative_health/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the relative health of the player should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "Which value the relative health should be compared to.\nrelativeHealth = currentHealth / maxHealth",
						"minimum": 0,
						"maximum": 1
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:resource"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/resource/"
			},
			"then": {
				"properties": {
					"resource": {
						"type": "string",
						"description": "The namespace and ID of a power that will be evaluated.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["example:a_simple_resource"]
					},
					"comparison": {
						"description": "How the value of the power that will be evaluated should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "The value to compare the value of the power that will be evaluated to."
					}
				},
				"required": ["resource", "comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:riding_recursive"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding_recursive/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, it will only check for the entity/entities that fulfill the bi-entity condition."
					},
					"comparison": {
						"description": "How the amount of entities currently being ridden should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="],
						"default": ">="
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value the amount of entities currently being ridden should be compared to.",
						"default": 1
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:riding_root", "origins:riding"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding_root/ https://origins.readthedocs.io/en/latest/types/entity_condition_types/riding/"
			},
			"then": {
				"properties": {
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, it will only check for the entity/entities that fulfill the bi-entity condition."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:saturation_level"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/saturation_level/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the saturation level should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "number",
						"description": "The value the saturation level should be compared to.\nNote that only players have a saturation level."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:scoreboard"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/scoreboard/"
			},
			"then": {
				"properties": {
					"name": {
						"description": "If specified, the condition will check for the score of this score holder.",
						"type":"string"
					},
					"objective": {
						"description": "The name of the scoreboard objective to retrieve the value from and compare.\nDue to the nature of scoreboards, this condition is only effective on the server-side.\nIf the entity does not have the scoreboard objective, this condition returns false; ingoring of the values of \"comparison\" and \"compare_to\".",
						"type": "string"
					},
					"comparison": {
						"description": "How to compare the objective's value to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"description": "Which value to compare the objective's value to.",
						"type": "integer"
					}
				},
				"required": ["objective", "comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:status_effect"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/status_effect/"
			},
			"then": {
				"properties": {
					"effect": {
						"description": "The namespace and ID of the status effect to check for.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:speed"]
					},
					"min_amplifier": {
						"description": "The minimum amplifier the status effect should have in order to pass the check.\nNote: As 0 is the default strenght; effects like 'Speed II' have an amplifier (or bonus if you will) of 1.",
						"type": "integer",
						"maximum": 2147483647,
						"default": 0
					},
					"max_amplifier": {
						"description": "The maximum amplifier the status effect should have in order to pass the check.\nNote: As 0 is the default strenght; effects like 'Speed II' have an amplifier (or bonus if you will) of 1.",
						"type": "integer",
						"maximum": 2147483647,
						"default": 2147483647
					},
					"min_duration": {
						"description": "The minimum duration in ticks the status effect should have left in order to pass the check.",
						"type": "integer",
						"minimum": 0, "maximum": 2147483647,
						"default": 0
					},
					"max_duration": {
						"description": "The maximum duration in ticks the status effect should have left in order to pass the check.",
						"type": "integer",
						"minimum": 0, "maximum": 2147483647,
						"default": 2147483647
					}
				},
				"required": ["effect"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:submerged_in"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/submerged_in/"
			},
			"then": {
				"properties": {
					"fluid": {
						"type": "string",
						"description": "The namespace and ID of the fluid tag that should be checked.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:water", "minecraft:lava"]
					}
				},
				"required": ["fluid"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:time_of_day"} },
				"require": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/time_of_day/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the current day time ticks of the world should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "The value to compare the current day time ticks of the world to.\nSee https://minecraft.fandom.com/wiki/Daylight_cycle#24-hour_Minecraft_day for how this value coresponds to the ingame value.",
						"minimum": 0,
						"maximum": 24000
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:using_item"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/using_item/"
			},
			"then": {
				"properties": {
					"item_condition": {
						"$ref": "../conditions/item.json",
						"description": "If specified, the condition will only evaluate to true if the item that is being used fulfills the specified item condition type."
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:xp_levels"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/xp_levels/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the experience level of the player should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value the experience level should be compared to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:xp_points"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_condition_types/xp_points/"
			},
			"then": {
				"properties": {
					"comparison": {
						"description": "How the experience points of the player should be compared to the specified value.",
						"enum": ["<", "<=", ">", ">=", "==", "!="]
					},
					"compare_to": {
						"type": "integer",
						"description": "Which value the experience points should be compared to."
					}
				},
				"required": ["comparison", "compare_to"]
			}
		}
	]
}