{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "origins_block_action",
	"description": "Block Actions operate an action on a selected block or set of blocks.\nSee: https://origins.readthedocs.io/en/latest/types/block_action_types/",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"pattern": "^[a-z0-9\\-_\\.\\*]+:[a-z0-9\\-_\\./\\*]+$",
			"examples": [
				"origins:and", "origins:chance", "origins:choice", "origins:delay",
				"origins:if_else_list", "origins:if_else", "origins:nothing", "origins:side",
				"origins:area_of_effect", "origins:offset",
				"origins:add_block", "origins:bonemeal", "origins:execute_command",
				"origins:explode", "origins:modify_block_state", "origins:set_block", "origins:spawn_entity"
			]
		}
	},
	"required": ["type"],
	"allOf": [
		{
			"$comment": "#region meta",
			"if": {
				"properties": { "type": {"const":"origins:and"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
						"items": {"$ref": "#"},
						"minItems": 1
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:chance"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"exclusiveMinimum": 0,
						"exclusiveMaximum": 1
					},
					"fail_action": {
						"$ref": "#",
						"description": "The action to execute if the specified action in the action field is not executed."
					}
				},
				"required": ["action", "chance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:choice"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
						"items": {
							"type": "object",
							"properties": {
								"element": {"$ref": "#"},
								"weight": {"type": "integer", "exclusiveMinimum": 0}
							},
							"required": ["element", "weight"]
						},
						"minItems": 2
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:delay"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which will be executed after the delay."
					},
					"ticks": {
						"type":"integer",
						"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/",
						"exclusiveMinimum": 0
					}
				},
				"required": ["action", "ticks"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:if_else_list"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
						"items": {
							"type": "object",
							"properties": {
								"action": {"$ref": "#"},
								"condition": {"$ref": "../conditions/block.json"}
							},
							"required": ["action", "condition"]
						},
						"minItems": 2
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:if_else"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
			},
			"then": {
				"properties": {
					"condition": {
						"$ref": "../conditions/block.json",
						"description": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#",
						"description": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#",
						"description": "If present, this action will be executed when the condition evaluates to false."
					}
				},
				"required": ["condition", "if_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:side"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/side/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to execute."
					},
					"side": {
						"description": "Determines where to execute the specified action type. Accepts \"client\" or \"server\"",
						"enum": ["client", "server"]
					}
				},
				"required": ["action", "side"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:area_of_effect"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/area_of_effect/"
			},
			"then": {
				"properties": {
					"radius": {
						"type": "integer",
						"description": "Determines the radius of the area.",
						"default": 16
					},
					"shape": {
						"enum": ["cube", "star", "sphere"],
						"description": "Determines the shape of the area.",
						"default": "cube"
					},
					"block_action": {
						"$ref": "#",
						"description": "The block action to execute on the blocks within the specified radius."
					},
					"block_condition": {
						"$ref": "../conditions/block.json",
						"description": "If specified, the specified block action will only be executed on blocks that fulfill this block condition."
					}
				},
				"required": ["block_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:offset"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/offset/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to apply with the given offset."
					},
					"x": {
						"type": "integer",
						"description": "How much to offset the position on the x-axis.",
						"default": 0
					},
					"y": {
						"type": "integer",
						"description": "How much to offset the position on the y-axis.",
						"default": 0
					},
					"z": {
						"type": "integer",
						"description": "How much to offset the position on the z-axis.",
						"default": 0
					}
				},
				"required": ["action"],
				"not": { "properties": {
					"x": {"const": 0}, "y": {"const": 0}, "z": {"const": 0}
				}}
			},
			"$comment": "#endregion meta"
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:add_block", "origins:set_block"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/add_block/ https://origins.readthedocs.io/en/latest/types/block_action_types/set_block/"
			},
			"then": {
				"properties": {
					"block": {
						"type": "string",
						"description": "The namespace and ID of the block to place.",
						"pattern": "^[a-z0-9\\-_\\.\\*]+:[a-z0-9\\-_\\./\\*]+$",
						"examples": ["minecraft:coal_ore"]
					}
				},
				"required": ["block"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:bonemeal"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/bonemeal/"
			},
			"then": {
				"properties": {
					"effects": {
						"type":"boolean",
						"default": true,
						"description": "Determines if the particle and other visual effects of the bonemeal-ing action should appear."
					}
				},
				"required": ["effects"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:execute_command"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/execute_command/"
			},
			"then": {
				"properties": {
					"command": {
						"type": "string",
						"description": "The command to execute.",
						"examples": ["summon minecraft:item ~ ~ ~ {Item:{id:\"minecraft:wheat\",Count:1}}"]
					},
					"permission_level": {
						"type": "integer",
						"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator.\nSee https://minecraft.wiki/w/Server.properties#op-permission-level for details.",
						"default": 4,
						"minimum": 0,
						"maximum": 4,
						"deprecated": true
					}
				},
				"required": ["command"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:explode"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/explode/"
			},
			"then": {
				"properties": {
					"power": {
						"type":"number",
						"description": "Determines the power of the explosion.\nSee: https://minecraft.wiki/w/Explosion#Explosion_strength"
					},
					"destruction_type": {
						"description": "Determines the effect of the explosion on the terrain.",
						"enum": ["break", "destroy", "none"],
						"default": "break"
					},
					"damage_self": {
						"type":"boolean",
						"default": true,
						"description": "[Deprecated]Determines if the exploding block should be affected by the summoned explosion.",
						"deprecated": true
					},
					"indestructible": {
						"$ref": "../conditions/block.json",
						"description": "If specified, the blocks that fulfills the specified block condition type is not destroyed by the summoned explosion."
					},
					"destructible": {
						"$ref": "../conditions/block.json",
						"description": "If specified, the blocks that fulfills this specified block condition type are the only blocks that are destroyed by the summoned explosion."
					},
					"create_fire": {
						"type":"boolean",
						"default":false,
						"description": "Determines if the explosion should create fire."
					}
				},
				"required": ["power"],
				"not": {"required": ["indestructible", "destructible"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_block_state"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/modify_block_state/"
			},
			"then": {
				"properties": {
					"property": {
						"type":"string",
						"description": "The name of the property that will be modified.\nSee https://minecraft.wiki/w/Block_states#List_of_block_states for possible values.",
						"examples": [
							"facing", "waterlogged", "age", "leaves", "stage", "rotation", "open", "axis", "occupied", "part", "honey_level",
							"attachment", "powered", "tilt", "lit", "has_bottle_0", "drag", "signal_fire", "candles", "level"
						]
					},
					"operation": {
						"description": "Determines how the value specified in the change field is operated on the specified property. Accepts \"add\" or \"set\".",
						"enum": ["add", "set"],
						"default": "add"
					},
					"change": {
						"type":"integer",
						"description": "If specified, the value to add, remove or set to/from the specified property if the specified property is an integer."
					},
					"value": {
						"type":"boolean",
						"description": "If specified, the boolean to use as the new value for the specified property if the specified property is a boolean."
					},
					"enum": {
						"type":"string",
						"description": "If specified, the string to use as the new value for the specified property if the specified property is a string."
					},
					"cycle": {
						"type":"boolean",
						"default": false,
						"description": "If set to true, changes the property to the next state in the cycle, ignoring all other optional fields. All property types can use this operation."
					}
				},
				"required": ["property"],
				"oneOf": [
					{"required": ["change"]}, {"required": ["value"]}, {"required": ["enum"]}, {"properties": {"cycle": {"const": true}}},
					{"not": {"anyOf": [{"required": ["change"]}, {"required": ["value"]}, {"required": ["enum"]}, {"properties": {"cycle": {"const": true}}}]}}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:spawn_entity"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/block_action_types/spawn_entity/"
			},
			"then": {
				"properties": {
					"entity_type": {
						"type": "string",
						"description": "The ID of the type of entity that will be spawned.",
						"pattern": "^[a-z0-9\\-_\\.\\*]+:[a-z0-9\\-_\\./\\*]+$",
						"examples": ["minecraft:vex"]
					},
					"tag": {
						"type": "string",
						"description": "If specified, this NBT data will be applied to the entity that will be spawned."
					},
					"entity_action": {
						"$ref": "../actions/entity.json",
						"description": "If specified, this entity action will be executed on the spawned entity."
					}
				},
				"required": ["entity_type"]
			}
		}
	]
}