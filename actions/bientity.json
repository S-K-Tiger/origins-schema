{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "origins_bientity_action",
	"description": "Bi-entity Action Types operate on a Pair<Entity, Entity>; in simpler terms: an actor and a target. The actor and target is determined depending on the used power type, and can be swapped.\nSee https://origins.readthedocs.io/en/latest/types/bientity_action_types/",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"description": "ID and namespace of the bientity action to evaluate.\nSee https://origins.readthedocs.io/en/latest/types/bientity_action_types/",
			"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
			"examples": [
				"origins:and", "origins:chance", "origins:choice", "origins:delay", "origins:if_else_list", "origins:if_else",
				"origins:nothing", "origins:side",
				"origins:actor_action", "origins:invert", "origins:target_action",
				"origins:add_velocity", "origins:damage", "origins:mount", "origins:set_in_love", "origins:tame"
			]
		}
	},
	"required": ["type"],
	"allOf": [
		{
			"$comment": "#region meta",
			"if": {
				"properties": { "type": {"const":"origins:and"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
						"items": {"$ref": "#"},
						"minItems": 1
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:chance"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"exclusiveMinimum": 0,
						"exclusiveMaximum": 1
					},
					"fail_action": {
						"$ref": "#",
						"description": "The action to execute if the specified action in the action field is not executed."
					}
				},
				"required": ["action", "chance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:choice"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
						"items": {
							"type": "object",
							"properties": {
								"element": {"$ref": "#"},
								"weight": {"type": "integer", "exclusiveMinimum": 0}
							},
							"required": ["element", "weight"]
						},
						"minItems": 2
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:delay"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "../actions/entity.json",
						"description": "The action which will be executed after the delay."
					},
					"ticks": {
						"type":"integer",
						"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/",
						"exclusiveMinimum": 0
					}
				},
				"required": ["action", "ticks"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:if_else_list"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
						"items": {
							"type": "object",
							"properties": {
								"action": {"$ref": "#"},
								"condition": {"$ref": "../conditions/bientity.json"}
							},
							"required": ["action", "condition"]
						},
						"minItems": 2
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:if_else"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
			},
			"then": {
				"properties": {
					"condition": {
						"$ref": "../conditions/bientity.json",
						"description": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#",
						"description": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#",
						"description": "If present, this action will be executed when the condition evaluates to false."
					}
				},
				"required": ["condition", "if_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:side"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/side/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to execute."
					},
					"side": {
						"description": "Determines where to execute the specified action type. Accepts \"client\" or \"server\"",
						"enum": ["client", "server"]
					}
				},
				"required": ["action", "side"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:actor_action"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/actor_action/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "../actions/entity.json",
						"description": "The entity action type to execute on the actor entity."
					}
				},
				"required": ["action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:invert"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/invert/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The bi-entity action to execute which will have its 'target' and 'actor' contexts swapped."
					}
				},
				"required": ["action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:target_action"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/target_action/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "../actions/entity.json",
						"description": "The entity action type to execute on the target entity."
					}
				},
				"required": ["action"]
			},
			"$comment": "#endregion meta"
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:add_velocity"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/add_velocity/"
			},
			"then": {
				"properties": {
					"x": {
						"type": "number",
						"default": 0.0,
						"description": "The amount of velocity to add on the x-axis."
					},
					"y": {
						"type": "number",
						"default": 0.0,
						"description": "The amount of velocity to add on the y-axis."
					},
					"z": {
						"type": "number",
						"default": 0.0,
						"description": "The amount of velocity to add on the z-axis."
					},
					"client": {
						"type":"boolean",
						"default": true,
						"description": "If this is false, the action will not execute on the client.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/bientity_action_types/add_velocity/"
					},
					"server": {
						"type":"boolean",
						"default": true,
						"description": "If this is false, the action will not execute on the server.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/bientity_action_types/add_velocity/"
					},
					"set": {
						"type": "boolean",
						"default": false,
						"description": "If this is true, the action will act as a \"set\" velocity action, overriding the entity's current velocity instead of adding to it."
					}
				},
				"$comment": "origins:nothing should be used instead if you want no change.",
				"allOf": [
					{"not": { "properties": {
						"x": {"const": 0}, "y": {"const": 0}, "z": {"const": 0},
						"set": {"const": false}
					}}},
					{"not": { "properties": {
						"client": {"const": false}, "server": {"const": false}
					}}}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:damage"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/bientity_action_types/damage/"
			},
			"then": {
				"properties": {
					"amount": {
						"type": "number",
						"description": "The amount of damage to deal."
					},
					"source": {
						"$ref": "../data_types/damage_source.json",
						"description": "[DEPRECATED]Use `damage_type` instead.",
						"deprecated": true
					},
					"damage_type": {
						"description": "The damage type to be used. Controls e.g. the death message, invulnerabilities (e.g. towards fire), or whether armor is taken into account.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:cramming", "minecraft:on_fire"]
					}
				},
				"required": ["amount", "damage_type"]
			}
		}
	]
}