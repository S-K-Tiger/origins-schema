{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "origins_entity_action",
	"description": "Entity Actions operate on an Entity. Some more specific actions only have an effect on more specific entity types (e.g. Exhaust (Action) only works on PlayerEntity, as other entities do not have a hunger bar).\nSee: https://origins.readthedocs.io/en/latest/types/entity_action_types/",
	"type": "object",
	"properties": {
		"type": {
			"type": "string",
			"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
			"examples": [
				"origins:and", "origins:chance", "origins:choice", "origins:delay",
				"origins:if_else_list", "origins:if_else", "origins:nothing", "origins:side",
				"origins:add_velocity", "origins:add_xp", "origins:apply_effect", "origins:area_of_effect", "origins:block_action_at",
				"origins:change_resource", "origins:clear_effect", "origins:crafting_table", "origins:damage", "origins:dismount",
				"origins:drop_inventory", "origins:emit_game_event", "origins:ender_chest", "origins:equipped_item_action",
				"origins:execute_command", "origins:exhaust", "origins:explode", "origins:extinguish", "origins:feed", "origins:gain_air",
				"origins:give", "origins:grant_advancement", "origins:grant_power", "origins:heal", "origins:modify_death_ticks",
				"origins:modify_inventory", "origins:modify_resource", "origins:modify_stat", "origins:passenger_action",
				"origins:play_sound", "origins:raycast", "origins:replace_inventory", "origins:revoke_advancement", "origins:revoke_power",
				"origins:riding_action", "origins:selector_action", "origins:set_fall_distance", "origins:set_on_fire",
				"origins:spawn_effect_cloud", "origins:spawn_entity", "origins:spawn_particles", "origins:swing_hand", "origins:toggle",
				"origins:trigger_cooldown"
			]
		}
	},
	"required": ["type"],
	"allOf": [
		{
			"$comment": "#region meta",
			"if": {
				"properties": { "type": {"const":"origins:and"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "These actions will be executed one after the other (but in the same tick).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/and/",
						"items": {"$ref": "#"},
						"minItems": 1
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:chance"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/chance/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which might be executed."
					},
					"chance": {
						"type": "number",
						"description": "The chance that the action will execute, from 0 to 1. (E.g. 0.1 means 10% chance, 0.95 means 95% chance).",
						"exclusiveMinimum": 0, "exclusiveMaximum": 1
					},
					"fail_action": {
						"$ref": "#",
						"description": "The action to execute if the specified action in the action field is not executed."
					}
				},
				"required": ["action", "chance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:choice"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/choice/"
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "Executes one of the provided actions, choosing randomly based on the assigned weights. The actions with higher weight values are more likely to be chosen.\nweight / sumOfAllWeights = chance",
						"items": {
							"type": "object",
							"properties": {
								"element": {"$ref": "#"},
								"weight": {"type": "integer", "exclusiveMinimum": 0}
							},
							"required": ["element", "weight"]
						},
						"minItems": 2
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:delay"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action which will be executed after the delay."
					},
					"ticks": {
						"type":"integer",
						"description": "The amount of ticks until the action is executed.\nDelaying an action for more than a few ticks is not recommended! This meta action type is not reliable for such task.\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/delay/",
						"exclusiveMinimum": 0
					}
				},
				"required": ["action", "ticks"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:if_else_list"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"actions": {
						"type": "array",
						"description": "Checks a list of actions associated with conditions, and executes the first one in the list for which the condition holds. Basically a less indentation-heavy way to represent a deeply nested If-Else (Meta Action Type).\nSee https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else_list/",
						"items": {
							"type": "object",
							"properties": {
								"action": {"$ref": "#"},
								"condition": {"$ref": "../conditions/entity.json"}
							},
							"required": ["action", "condition"]
						},
						"minItems": 2
					}
				},
				"required": ["actions"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:if_else"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/if_else/"
			},
			"then": {
				"properties": {
					"condition": {
						"$ref": "../conditions/entity.json",
						"description": "A condition based on the type of action."
					},
					"if_action": {
						"$ref": "#",
						"description": "The action which is executed when the condition evaluates to true."
					},
					"else_action": {
						"$ref": "#",
						"description": "If present, this action will be executed when the condition evaluates to false."
					}
				},
				"required": ["condition", "if_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:side"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/meta_action_types/side/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "The action to execute."
					},
					"side": {
						"description": "Determines where to execute the specified action type. Accepts \"client\" or \"server\"",
						"enum": ["client", "server"]
					}
				},
				"required": ["action", "side"]
			},
			"$comment": "#endregion meta"
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:add_velocity"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/"
			},
			"then": {
				"properties": {
					"x": {
						"type": "number",
						"default": 0.0,
						"description": "The amount of velocity to add on the x-axis."
					},
					"y": {
						"type": "number",
						"default": 0.0,
						"description": "The amount of velocity to add on the y-axis."
					},
					"z": {
						"type": "number",
						"default": 0.0,
						"description": "The amount of velocity to add on the z-axis."
					},
					"space": {
						"description": "The Space to perform the velocity addition in.\nSee https://origins.readthedocs.io/en/latest/misc/extras/space/",
						"default": "world",
						"enum": ["world", "local", "local_horizontal", "local_horizontal_normalized", "velocity", "velocity_normalized", "velocity_horizontal", "velocity_horizontal_normalized"]
					},
					"client": {
						"type":"boolean",
						"default": true,
						"description": "If this is false, the action will not execute on the client.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/"
					},
					"server": {
						"type":"boolean",
						"default": true,
						"description": "If this is false, the action will not execute on the server.\nUsed in cases where this action behaves unexpectedly. See https://origins.readthedocs.io/en/latest/types/entity_action_types/add_velocity/"
					},
					"set": {
						"type": "boolean",
						"default": false,
						"description": "If this is true, the action will act as a \"set\" velocity action, overriding the entity's current velocity instead of adding to it."
					}
				},
				"$comment": "origins:nothing should be used instead if you want no change.",
				"allOf": [
					{"not": { "properties": {
						"x": {"const": 0}, "y": {"const": 0}, "z": {"const": 0},
						"set": {"const": false}
					}}},
					{"not": { "properties": {
						"client": {"const": false}, "server": {"const": false}
					}}}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:add_xp"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/add_xp/"
			},
			"then": {
				"properties": {
					"points": {
						"type": "integer",
						"description": "If set, this is the amount experience points that will be given to the player. Can not be negative.",
						"minimum": 0
					},
					"levels": {
						"type": "integer",
						"description": "If set, this is the amount experience levels that will be given to the player. Can be negative and thus used to subtract levels."
					}
				},
				"anyOf": [
					{"required": ["points"]},
					{"required": ["levels"]}
				]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:apply_effect"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/apply_effect/"
			},
			"then": {
				"properties": {
					"effect": {
						"$ref": "../data_types/status_effect_instance.json",
						"description": "If set, this status effect will be applied by this action."
					},
					"effects": {
						"type": "array",
						"description": "If set, these status effects will be applied by this action.",
						"items": {"$ref": "../data_types/status_effect_instance.json"},
						"minItems": 1
					}
				},
				"oneOf": [{"required": ["effect"]}, {"required": ["effects"]}]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:area_of_effect"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/area_of_effect/"
			},
			"then": {
				"properties": {
					"radius": {
						"type":"number",
						"description": "Determines the radius of the area.",
						"default": 16.0
					},
					"bientity_action": {
						"$ref": "../actions/bientity.json",
						"description": "If specified, this bi-entity action type may be executed on either or both the actor (the entity that has the power) and target (the entities within the specified radius)."
					},
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, only execute the specified bi-entity action if this bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entities within the specified radius)."
					},
					"include_target": {
						"type":"boolean",
						"description": "Determines whether the entity this action was executed on is included in the radius check.",
						"default": false
					}
				},
				"required": ["bientity_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:block_action_at"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/block_action_at/"
			},
			"then": {
				"properties": {
					"block_action": {
						"$ref": "../actions/block.json",
						"description": "The block action type to execute."
					}
				},
				"required": ["block_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:change_resource"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/change_resource/"
			},
			"then": {
				"properties": {
					"resource": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the power that uses the Resource (Power Type) or has a built-in cooldown."
					},
					"change": {
						"type": "integer",
						"description": "This value will be added to the resource (won't go below `min` or above `max` of the Resource (Power Type))."
					},
					"operation": {
						"description": "Determines if the action should add or set the value of the resource.",
						"enum": ["add", "set"],
						"default": "add"
					}
				},
				"required": ["resource", "change"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:clear_effect"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/clear_effect/"
			},
			"then": {
				"properties": {
					"effect": {
						"type": "string",
						"description": "If specified, the status effect with this namespace and ID will be cleared. If not specified, all status effects will be cleared.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:poison"]
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:damage"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/damage/"
			},
			"then": {
				"properties": {
					"amount": {
						"type": "number",
						"description": "The amount of damage to deal."
					},
					"source": {
						"$ref": "../data_types/damage_source.json",
						"description": "[DEPRECATED]Use `damage_type` instead.",
						"deprecated": true
					},
					"damage_type": {
						"description": "The damage type to be used. Controls e.g. the death message, invulnerabilities (e.g. towards fire), or whether armor is taken into account.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:cramming", "minecraft:on_fire"]
					}
				},
				"required": ["amount", "damage_type"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:drop_inventory"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/drop_inventory/"
			},
			"then": {
				"properties": {
					"inventory_type": {
						"type": "string",
						"description": "Determines whether to drop the items from the inventory of the entity or the inventory of a power present in the entity.",
						"enum": ["inventory", "power"],
						"default": "inventory"
					},
					"entity_action": {
						"description": "If specified, this action will be executed on the entity before the items are dropped.",
						"$ref": "../actions/entity.json"
					},
					"item_action": {
						"description": "If specified, this action will be executed on the affected items before the affected items are dropped.",
						"$ref": "../actions/item.json"
					},
					"item_condition": {
						"description": "If specified, only items which fulfill this condition will be dropped.",
						"$ref": "../conditions/item.json"
					},
					"slot": {
						"description": "If specified, only items in the designated slot will be dropped.",
						"$ref": "../data_types/item_slot.json"
					},
					"slots": {
						"description": "If specified, only items in the designated slots will be dropped.",
						"minItems": 2,
						"items": {"$ref": "../data_types/item_slot.json"}
					},
					"power": {
						"description": "If specified, the items in the inventory of this power will be dropped instead of the items in the entity's inventory if `inventory_type` is set to `\"power\"`.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"throw_randomly": {
						"description": "If `true`, items will be thrown in random directions instead of being normally dropped, similar to how items are dropped when you die.",
						"type": "boolean",
						"default": false
					},
					"retain_ownership": {
						"description": "If `true`, the dropped items will have their `Thrower` NBT set as the `UUID` NBT of the entity that invoked the action.",
						"type": "boolean",
						"default": true
					},
					"amount": {
						"description": "If specified, the affected items will be split by this amount.",
						"type": "integer"
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:emit_game_event"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"event": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of a game event. See https://minecraft.fandom.com/wiki/Sculk_Sensor#Vibration_amplitudes for a list of game events you can use.",
						"examples": [
							"minecraft:step",
							"minecraft:flap",
							"minecraft:swim",
							"minecraft:elytra_free_fall",
							"minecraft:hit_ground",
							"minecraft:block_change", "minecraft:minecart_moving", "minecraft:ring_bell", "minecraft:splash", "minecraft:wolf_shaking",
							"minecraft:drinking_finish", "minecraft:prime_fuse", "minecraft:projectile_shoot",
							"minecraft:mob_interact", "minecraft:projectile_land", "minecraft:eat", "minecraft:entity_damaged",
							"minecraft:equip", "minecraft:shear", "minecraft:ravager_roar",
							"minecraft:block_close", "minecraft:block_unswitch", "minecraft:block_unpress", "minecraft:block_detach", "minecraft:dispense_fail",
							"minecraft:block_open", "minecraft:block_switch", "minecraft:block_press", "minecraft:block_attach",
							"minecraft:block_place", "minecraft:entity_place", "minecraft:fluid_place",
							"minecraft:block_destroy", "minecraft:entity_killed", "minecraft:fluid_pickup",
							"minecraft:fishing_rod_reel_in", "minecraft:container_close", "minecraft:piston_contract", "minecraft:shulker_close",
							"minecraft:fishing_rod_cast", "minecraft:container_open", "minecraft:explode", "minecraft:lightning_strike", "minecraft:piston_extend", "minecraft:shulker_open"
						]
					}
				},
				"required": ["event"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:equipped_item_action"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/equipped_item_action/"
			},
			"then": {
				"properties": {
					"equipment_slot": {
						"description": "Which equipped item to execute the action on. One of: \"mainhand\", \"offhand\", \"head\", \"chest\", \"legs\", \"feet\".",
						"enum": ["mainhand", "offhand", "head", "chest", "legs", "feet"]
					},
					"action": {
						"$ref": "../actions/item.json",
						"description": "The item action type to execute on the item stack in the specified equipment slot."
					}
				},
				"required": ["equipment_slot", "action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:execute_command"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/execute_command/"
			},
			"then": {
				"properties": {
					"command": {
						"type": "string",
						"description": "The command to execute with the entity as the source (i.e. @s will select the entity itself)."
					},
					"permission_level": {
						"type": "integer",
						"description": "[Deprecated since 1.1.0]The permission level to use for the command. 0 is a \"survival player\", anything higher emulates some form of operator. See https://minecraft.fandom.com/wiki/Server.properties#op-permission-level for details.",
						"minimum": 0, "maximum": 4, "default": 4,
						"deprecated": true
					}
				},
				"required": ["command"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:exhaust"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/exhaust/"
			},
			"then": {
				"properties": {
					"amount": {
						"type": "number",
						"description": "The amount of exhaustion to apply to the player."
					}
				},
				"required": ["amount"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:explode"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/explode/"
			},
			"then": {
				"properties": {
					"power": {
						"type": "number",
						"description": "Determines the power of the explosion.\nSee: https://minecraft.fandom.com/wiki/Explosion#Explosion_strength"
					},
					"destruction_type": {
						"enum": ["destroy", "break", "none"],
						"description": "Determines the effect of the explosion on the terrain.",
						"default": "break"
					},
					"damage_self": {
						"type": "boolean",
						"description": "Determines if the player should take damage from the summoned explosion.",
						"default": true
					},
					"indestructible": {
						"$ref": "../conditions/block.json",
						"description": "If specified, the blocks that fulfills the specified block condition type is not destroyed by the summoned explosion."
					},
					"destructible": {
						"$ref": "../conditions/block.json",
						"description": "If specified, the blocks that fulfills this specified block condition type are the only blocks that are destroyed by the summoned explosion."
					},
					"create_fire": {
						"type": "boolean",
						"description": "Determines if the explosion should create fire.",
						"default": false
					}
				},
				"required": ["power"],
				"not": {"required": ["indestructible", "destructible"]}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:feed"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/feed/"
			},
			"then": {
				"properties": {
					"food": {
						"type": "integer",
						"description": "The amount of food points to restore."
					},
					"saturation": {
						"type": "number",
						"description": "The amount of saturation points to restore."
					}
				},
				"required": ["food", "saturation"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:gain_air"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/gain_air/"
			},
			"then": {
				"properties": {
					"value": {
						"type": "integer",
						"description": "The amount of breath to restore."
					}
				},
				"required": ["value"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:give"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/give/"
			},
			"then": {
				"properties": {
					"stack": {
						"$ref": "../data_types/item_stack.json",
						"description": "The item stack to give to the entity."
					},
					"item_action": {
						"$ref": "../actions/item.json",
						"description": "If specified, the specified item action type will be executed on the item stack before it's given to the player."
					},
					"preferred_slot": {
						"description": "If specified, this will prioritize the action to put the item in the specified slot. Accepts \"chest\", \"feet\", \"head\", \"legs\", \"mainhand\" or \"offhand\".",
						"enum": ["chest", "feet", "head", "legs", "mainhand", "offhand"]
					}
				},
				"required": ["stack"]
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:grant_advancement", "origins:revoke_advancement"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/grant_advancement/ https://origins.readthedocs.io/en/latest/types/entity_action_types/revoke_advancement/"
			},
			"then": {
				"properties": {
					"advancement": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the advancement to be granted/revoked from the player.",
						"examples": ["minecraft:adventure/arbalistic"]
					}
				},
				"required": ["advancement"]
			}
		},
		{
			"if": {
				"properties": { "type": { "enum": ["origins:grant_power", "origins:revoke_power"] } }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/grant_power/ https://origins.readthedocs.io/en/latest/types/entity_action_types/revoke_power/"
			},
			"then": {
				"properties": {
					"power": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the power to be granted/revoked to/from the entity.",
						"examples": ["origins:elytra"]
					},
					"source": {
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"description": "The namespace and ID of the source of the power.",
						"examples": ["origins:elytrian"]
					}
				},
				"required": ["power", "source"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:heal"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/heal/"
			},
			"then": {
				"properties": {
					"amount": {
						"type": "number",
						"description": "The amount of health to restore."
					}
				},
				"required": ["amount"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_death_ticks"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/modify_death_ticks/"
			},
			"then": {
				"properties": {
					"amount": {
						"$ref": "../data_types/modifier.json",
						"description": "This modifier will be applied to the current death ticks value of the entity."
					}
				},
				"required": ["amount"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_inventory"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/modify_inventory/"
			},
			"then": {
				"properties": {
					"inventory_type": {
						"type": "string",
						"description": "Determines whether to modify the items in the inventory of the entity or the inventory of a power present in the entity.",
						"enum": ["inventory", "power"],
						"default": "inventory"
					},
					"entity_action": {
						"description": "If specified, this action will be executed on the entity before the items are modified.",
						"$ref": "../actions/entity.json"
					},
					"item_action": {
						"description": "The action to be executed on the affected items.",
						"$ref": "../actions/item.json"
					},
					"item_condition": {
						"description": "If specified, only items which fulfill this condition will be affected by specified action.",
						"$ref": "../conditions/item.json"
					},
					"slot": {
						"description": "If specified, only items in the designated slot will be modified.",
						"$ref": "../data_types/item_slot.json"
					},
					"slots": {
						"description": "If specified, only items in the designated slots will be modified.",
						"minItems": 2,
						"items": {"$ref": "../data_types/item_slot.json"}
					},
					"power": {
						"description": "If specified, the items in the inventory of this power will be modified instead of the items in the entity's inventory if `inventory_type` is set to `\"power\"`.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					}
				},
				"required": ["item_action"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_resource"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/modify_resource/"
			},
			"then": {
				"properties": {
					"modifier": {
						"$ref": "../data_types/modifier.json",
						"description": "This modifier will be applied to the current value of the target power."
					},
					"resource": {
						"description": "This power will have its value modified; as long as the power is using the Resource (Power Type) or the Cooldown (Power Type).",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					}
				},
				"required": ["modifier", "resource"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:modify_stat"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/modify_stat/"
			},
			"then": {
				"properties": {
					"stat": {
						"$ref": "../data_types/stat.json",
						"description": "The type and name of the statistic to be modified."
					},
					"modifier": {
						"$ref": "../data_types/modifier.json",
						"description": "This modifier will be applied to the current value of the statistic specified."
					}
				},
				"required": ["stat", "modifier"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:passenger_action"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/passenger_action/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "If set, executes the specified action on the passenger entity."
					},
					"bientity_action": {
						"$ref": "../actions/bientity.json",
						"description": "If set, executes the specified action that can execute on both the passenger and the entity that's being ridden."
					},
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If set, only execute the specified actions if the bi-entity condition is fulfilled."
					},
					"recursive": {
						"type": "boolean",
						"description": "If set to true, executes the specified actions on all the passenger entities, if there are more than one.",
						"default": false
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:play_sound"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/play_sound/"
			},
			"then": {
				"properties": {
					"sound": {
						"type": "string",
						"description": "The namespace and ID of the sound to play.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:entity.chicken.egg"]
					},
					"volume": {
						"type": "number",
						"description": "The volume of the sound.",
						"default": 1.0,
						"exclusiveMinimum": 0
					},
					"pitch": {
						"type": "number",
						"description": "The pitch of the sound.",
						"default": 1.0
					}
				},
				"required": ["sound"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:raycast"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/raycast/"
			},
			"then": {
				"properties": {
					"distance": {
						"type":"number",
						"description": "Determines the maximum distance the ray-cast will travel."
					},
					"block": {
						"type":"boolean",
						"default": true,
						"description": "Determines whether the ray-cast should include blocks."
					},
					"entity": {
						"type":"boolean",
						"default": true,
						"description": "Determines whether the ray-cast should include entities."
					},
					"shape_type": {
						"enum": ["collider", "outline", "visual"],
						"default": "visual",
						"description": "Determines how the ray-cast will handle blocks."
					},
					"fluid_handling": {
						"enum": ["any", "none", "source_only"],
						"default": "none",
						"description": "Determines how the ray-cast will handle fluids."
					},
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, the specified bi-entity action type will only be executed if the specified bi-entity condition type is fulfilled by either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the ray-cast)."
					},
					"bientity_action": {
						"$ref": "../actions/bientity.json",
						"description": "If specified, this bi-entity action type will be executed on either or both the 'actor' (the entity that has the power) or 'target' (the entity that was hit by the ray-cast)."
					},
					"block_action": {
						"$ref": "../actions/block.json",
						"description": "If specified, this block action type will be executed on the block the ray-cast has hit."
					},
					"before_action": {
						"$ref": "#",
						"description": "If specified, execute this entity action type before casting a ray."
					},
					"hit_action": {
						"$ref": "#",
						"description": "If specified, execute this entity action on the entity that executed the ray-cast if the ray-cast has hit an entity/block."
					},
					"miss_action": {
						"$ref": "#",
						"description": "If specified, execute this entity action on the entity that executed the ray-cast if the ray-cast did not hit an entity/block."
					},
					"command_at_hit": {
						"type":"string",
						"description": "The command to execute upon the block/entity the ray-cast has hit."
					},
					"command_hit_offset": {
						"type":"number",
						"description": "Determines the offset of the command specified in the command_at_hit field."
					},
					"command_along_ray": {
						"type":"string",
						"description": "The command to execute for each step of the ray-cast.",
						"examples": ["particle minecraft:soul_fire_flame"]
					},
					"command_step": {
						"type":"number",
						"default":1.0,
						"description": "Determines the size of the step of the ray-cast."
					},
					"command_along_ray_only_on_hit": {
						"type":"boolean",
						"default":false,
						"description": "Determines if the command specified in the command_along_ray field should be executed only if the ray-cast has hit a block/entity."
					}
				},
				"required": ["distance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:replace_inventory"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/replace_inventory/"
			},
			"then": {
				"properties": {
					"inventory_type": {
						"type": "string",
						"description": "Determines whether to replace the items from the inventory of the entity or the inventory of a power present in the entity.",
						"enum": ["inventory", "power"],
						"default": "inventory"
					},
					"entity_action": {
						"description": "If specified, this action will be executed on the entity before the items are replaced.",
						"$ref": "../actions/entity.json"
					},
					"item_action": {
						"description": "If specified, this action will be executed on the affected items after the affected items are replaced.",
						"$ref": "../actions/item.json"
					},
					"item_condition": {
						"description": "If specified, only items which fulfill this condition will be replaced.",
						"$ref": "../conditions/item.json"
					},
					"slot": {
						"description": "If specified, only items in the designated slot will be replaced.",
						"$ref": "../data_types/item_slot.json"
					},
					"slots": {
						"description": "If specified, only items in the designated slots will be replaced.",
						"items": {"$ref": "../data_types/item_slot.json"}
					},
					"power": {
						"description": "If specified, the items in the inventory of this power will be replaced instead of the items in the entity's inventory if `inventory_type` is set to `\"power\"`.",
						"type": "string",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$"
					},
					"stack": {
						"description": "The item to use as a replacement for the affected items.",
						"$ref": "../data_types/item_stack.json"
					},
					"merge_nbt": {
						"description": "Determines whether to merge the NBTs of the item that will be replaced and the NBTs of the item that will be used as a replacement.",
						"type": "boolean",
						"default": false
					}
				},
				"required": ["stack"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:riding_action"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/riding_action/"
			},
			"then": {
				"properties": {
					"action": {
						"$ref": "#",
						"description": "If set, executes the specified action on the entity that's been ridden."
					},
					"bientity_action": {
						"$ref": "../actions/bientity.json",
						"description": "If set, executes the specified action that can execute on both the passenger and the entity that's being ridden."
					},
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If set, only execute the specified actions if the bi-entity condition is fulfilled."
					},
					"recursive": {
						"type": "boolean",
						"description": "If set to true, executes the specified actions on all entities that are being ridden, if there are more than one.",
						"default": false
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:selector_action"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/selector_action/"
			},
			"then": {
				"properties": {
					"selector": {
						"description": "The selector to use for selecting entities. It can be the username of a player, the UUID of the entity or a target selector.",
						"type": "string"
					},
					"bientity_action": {
						"$ref": "../actions/bientity.json",
						"description": "If specified, this action will be executed on either or both the actor and target entities."
					},
					"bientity_condition": {
						"$ref": "../conditions/bientity.json",
						"description": "If specified, the specified action will only be executed if this condition is fulfilled by either or both the actor and target entities."
					}
				},
				"required": ["selector"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:set_fall_distance"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/set_fall_distance/"
			},
			"then": {
				"properties": {
					"fall_distance": {
						"type": "number",
						"description": "The desired fall distance value."
					}
				},
				"required": ["fall_distance"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:set_on_fire"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/set_on_fire/"
			},
			"then": {
				"properties": {
					"duration": {
						"type": "integer",
						"description": "The amount of seconds the entity should burn.",
						"minimum": 0
					}
				},
				"required": ["duration"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:spawn_effect_cloud"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_effect_cloud/"
			},
			"then": {
				"properties": {
					"radius": {
						"type": "number",
						"description": "The radius of the cloud.",
						"default": 3,
						"exclusiveMinimum": 0
					},
					"radius_on_use": {
						"type": "number",
						"description": "How much the radius should change when an effect is applied.",
						"default": -0.5
					},
					"wait_time": {
						"type": "integer",
						"description": "How many ticks to wait until the cloud takes effect.",
						"default": 10,
						"minimum": 0
					},
					"effect": {
						"$ref": "../data_types/status_effect_instance.json",
						"description": "If set, this status effect will be applied by the cloud to entities inside of it."
					},
					"effects": {
						"type": "array",
						"description": "If set, these status effects will be applied by the cloud to entities inside of it.",
						"items": {"$ref": "../data_types/status_effect_instance.json"},
						"minItems": 1
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:spawn_entity"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_entity/"
			},
			"then": {
				"properties": {
					"entity_type": {
						"type": "string",
						"description": "The namespace and ID of the entity type that will be spawned.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["minecraft:zombie"]
					},
					"tag": {
						"$comment": "TODO find pattern for tags",
						"type": "string",
						"description": "If specified, this NBT data will be applied to the entity that will be spawned."
					},
					"entity_action": {
						"$ref": "#",
						"description": "If specified, the specified entity action type will be executed on the entity that will be spawned when it is spawned."
					}
				},
				"required": ["entity_type"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:spawn_particles"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/spawn_particles/"
			},
			"then": {
				"properties": {
					"particle": {
						"$ref": "../data_types/particle_effect.json",
						"description": "The particle type that will be spawned."
					},
					"count": {
						"type":"integer",
						"description": "How much of the specified particle type will be spawned.",
						"minimum": 1
					},
					"speed": {
						"type":"number",
						"description": "Determines the speed of the specified particle type.",
						"default": 0.0
					},
					"force": {
						"type":"boolean",
						"description": "If set to true, the specified particle type that will be spawned can be seen from a far distance.",
						"default":false
					},
					"spread": {
						"$ref": "../data_types/vector.json",
						"description": "Determines the size of the three-dimensional cuboid volume to spawn the specified particle type in.",
						"default": {"x": 0.5, "y": 0.25, "z": 0.5}
					},
					"offset_y": {
						"type":"number",
						"description": "The offset of where the particle will be centered in the Y axis.",
						"default": 0.5
					}
				},
				"required": ["particle", "count"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:swing_hand"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/swing_hand/"
			},
			"then": {
				"properties": {
					"hand": {
						"description": "Determines which hand is swung. Accepts either \"MAIN_HAND\", \"OFF_HAND\"",
						"enum": ["MAIN_HAND", "OFF_HAND"],
						"default": "MAIN_HAND"
					}
				}
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:toggle"} }, "required": ["type"],
				"$comment": "https://origins.readthedocs.io/en/latest/types/entity_action_types/toggle/"
			},
			"then": {
				"properties": {
					"power": {
						"type": "string",
						"description": "The namespace and ID of the power that uses the Toggle (Power Type).",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:phantomize"]
					}
				},
				"required": ["power"]
			}
		},
		{
			"if": {
				"properties": { "type": {"const":"origins:trigger_cooldown"} }, "required": ["type"]
			},
			"then": {
				"properties": {
					"power": {
						"type": "string",
						"description": "The namespace and ID of the power that will be triggered.",
						"pattern": "^[a-z0-9\\-_\\.]+:[a-z0-9\\-_\\./]+$",
						"examples": ["origins:launch_into_air"]
					}
				},
				"required": ["power"]
			}
		}
	]
}